{"version":3,"file":"Logs-d911345d.js","sources":["../../src/views/LogsView/partial/HeadingRow.tsx","../../src/views/LogsView/Logs.tsx"],"sourcesContent":["import React from \"react\";\nimport { Button, Flex, Heading, Icon, SearchFilter } from \"@/components\";\nimport css from '../Logs.module.scss'\nimport { Dropdown, IBtndropProps } from \"@/components/basic/Dropdown/Dropdown\";\nimport { observer } from \"mobx-react\";\nimport { useStore } from \"@/stores\";\nimport { useHistory } from \"react-router-dom\";\ninterface IheadingRowProps {\n    title:string\n    buttons?:IBtndropProps[]\n    dropdownLabel?:string\n    onDownloadClick:()=>void,\n    type?:string,\n    back?: boolean,\n}\n\nexport const HeadingRow = observer(({title, dropdownLabel, buttons, onDownloadClick, type}:IheadingRowProps) => {\n    const {logsStore} = useStore()\n    const history = useHistory();\n    const handleSeach = (event:React.ChangeEvent<HTMLInputElement>) => {\n        logsStore.setSearchTerm(event.target.value);\n    };\n    return (\n        <Flex className={css.headingRow} justifyContent={'space-between'} flexWrap='wrap'>\n            {\n            logsStore.isCluster && (buttons && buttons.length >1) ?\n            <Flex>\n                <Heading className={css.pr2} variant='h2' title={`${dropdownLabel}:`} />\n                <Dropdown className={css.dropdown} color='neutral' size='medium' buttons={buttons} active={title} />\n            </Flex>\n            :\n            logsStore.isCluster ?\n            <Heading variant='h2' title={dropdownLabel? `${dropdownLabel}: ${title}`:title} className={css.mb2} />\n            :\n            <Flex alignItems=\"center\" spacing={1}> \n                {\n                    type === 'session' && (\n                        <Button.UI onClick={()=>history.goBack()}>\n                            <Icon name=\"arrow_back\" />\n                        </Button.UI>\n                    )\n                }\n                <Heading variant='h2' title={title} className={css.mb2} />\n            </Flex>\n            }\n            <Flex spacing={2} alignItems='center'>\n                {/* {\n                    type !== 'audit' &&\n                    <Switch value={logsStore.compact} size='large' onClick={()=>logsStore.setCompact()}>{logsStore.compact? t('general.wrapEnabled'):t('general.wrapDisabled')}</Switch>\n                } */}\n                { type !== 'audit' && (\n                    <>\n                        <Button icon={'zoom_out'} onClick={()=>{ logsStore.adjustFontSize(-0.1) }} />\n                        <Button icon={'zoom_in'} onClick={()=>{ logsStore.adjustFontSize(0.1) }} />\n                    </>\n                )}\n                <Button icon={'cloud_download'} onClick={onDownloadClick} />\n                {!logsStore.filterToggle && <Button color='neutral' icon={'search'} onClick={()=>logsStore.setFilterToggle()} /> }\n                {logsStore.filterToggle && <SearchFilter value={logsStore.searchTerm} onChange={handleSeach} onClose={()=>logsStore.setFilterToggle()} />}\n            </Flex>\n        </Flex>\n    )\n})","// .core\nimport React, {useEffect} from 'react'\nimport { useParams } from 'react-router-dom'\n\n// styles\nimport css from './Logs.module.scss'\nimport { useStore } from '@/stores';\nimport { LogsTable } from './partial/LogsTable';\nimport { observer } from 'mobx-react';\nimport { HeadingRow } from './partial/HeadingRow';\nimport { parseObject, toPath } from '@/utils';\nimport { changeTitle } from '@/views/routes';\nimport { useTranslation } from 'react-i18next';\n\ninterface LogParamTypes {\n    type: \"audit\" | \"server\" | \"admin\" | \"session\";\n    app:string;\n    id:string;\n    spId:string;\n}\n\nconst Logs = observer(() => {\n\n    const {logsStore, globalStore} = useStore()\n    const { type, app, id, spId } = useParams<LogParamTypes>();\n    const {t} = useTranslation()\n\n    const loadData = () => {\n        if(parseObject(logsStore.logsOverview).isEmpty()) {\n            logsStore.loadLogsOverview(app)\n            .then(()=> {\n                logsStore.refresh(app,type)\n            });\n        } else {\n            logsStore.refresh(app,type)\n        }\n    }\n\n    changeTitle(t('routes.logs')+' - ' +type);\n\n    \n    useEffect(() => {\n        globalStore.updateApp(app);\n    },[app]);\n    \n    useEffect(()=> {\n        logsStore.setType(type)\n        if(type ==='session' && app && id) {\n            logsStore.setInstanceId(id);\n            logsStore.setSessionSpLogId(spId);\n        } else {\n            logsStore.setInstanceId('');\n        }\n        loadData()\n        return () => logsStore.clearInterval();\n    },[type, id, spId])\n\n    return (\n        <div className={css.root}>\n            {\n                logsStore.type?.url === 'admin' &&\n                <HeadingRow \n                    title={t('logs.adminConsoleMessages')}\n                    type={type}\n                    onDownloadClick={()=>logsStore.downloadLogs(type)}\n                />\n            }\n            {\n                (type === 'audit' || type === 'server') &&\n                <HeadingRow \n                    title={logsStore.isCluster ? logsStore.serverLogId! : t(`logs.${type}Messages`)}\n                    buttons={logsStore.dropdownServerButtons}\n                    dropdownLabel={t('logs.clusterServer')}\n                    type={type}\n                    onDownloadClick={()=>logsStore.downloadLogs(type)}\n                />\n            }\n            {\n                logsStore.type?.url === 'sessionpool' &&\n                <HeadingRow \n                    title={logsStore.spLogId!}\n                    buttons={logsStore.dropdownSpButtons}\n                    dropdownLabel={t('logs.sp')}\n                    type={type}\n                    onDownloadClick={()=>logsStore.downloadLogs(type)}\n                />\n            }\n            {\n                (type === 'session' && id) &&\n                <HeadingRow\n                    back\n                    title={t('logs.appInst')+' '+ id +' '+ t('logs.msgs')}\n                    type={type}\n                    onDownloadClick={()=>logsStore.downloadSessionLogs(toPath('',app),logsStore.spLogId,id)}\n                />\n            }\n            <LogsTable type={type} app={app} id={id} />\n        </div>\n    )\n})\n\nexport default Logs"],"names":["HeadingRow","observer","title","dropdownLabel","buttons","onDownloadClick","type","logsStore","useStore","history","useHistory","handleSeach","event","jsxs","Flex","css","jsx","Heading","Dropdown","Button","Icon","Fragment","SearchFilter","Logs","globalStore","app","id","spId","useParams","t","useTranslation","loadData","parseObject","changeTitle","useEffect","_a","_b","toPath","LogsTable"],"mappings":"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"}