{"version":3,"file":"Sessions-6f9d2d5e.js","sources":["../../src/components/basic/ProgressBar/ProgressBar.tsx","../../src/views/Sessions/partials/MetricsCell.tsx","../../src/views/Sessions/partials/WarningsCell.tsx","../../src/views/Sessions/partials/SessionsTable.tsx","../../src/views/Sessions/partials/AppHeader/AppHeader.tsx","../../src/views/Sessions/partials/TabButtons.tsx","../../src/views/Sessions/partials/ColumnSelector.tsx","../../src/views/Sessions/partials/IdleSessionsTable.tsx","../../src/views/Sessions/Sessions.tsx"],"sourcesContent":["// .core\nimport React, { useEffect, useState } from 'react'\n// libraries\nimport cx from 'classnames'\n// styles\nimport css from './ProgressBar.module.scss'\n\ninterface IProgressBarProps {\n  className?: string,\n  label?:string,\n  now:number, \n  min?:number, \n  max?:number,\n  children?:React.ReactNode\n  /**\n   * Styling of the point, default theme color will be used if none specified.\n   */\n  color: 'primary' | 'danger' | 'success' | 'warning' | 'info',\n  onClick?(): void\n}\n\n\nexport const ProgressBar = ({\n  color,\n  label,\n  children,\n  now,\n  min=0,\n  max=100,\n  className,\n  onClick,\n}: IProgressBarProps) => {\n  const ROUND_PRECISION = 1000;\n  const [ calculated, setCalculated ] = useState<number>(0);\n  const getPercentage = (now:number, min:number, max:number) => {\n    const percentage = ((now - min) / (max - min)) * 100;\n    return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n  }\n  useEffect(()=>{\n    setCalculated(getPercentage(now,min,max));\n  },[now,min,max])\n\n  return (\n    <div className={cx(css.root, className)}>\n      <div className={cx(css.progress, css[color])} style={{width:`${calculated}%`}} />\n      <div className={css.content}>{children? children : now }</div>\n    </div>\n  )\n}\n\n","import React from \"react\";\nimport { Flex, ProgressBar } from \"@/components\";\nimport css from '../Sessions.module.scss'\nimport { SwingSession } from \"@/gen\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IMetricsCellProps {\n   session:SwingSession\n}\n\nexport const MetricsCell = ({session}:IMetricsCellProps) => {\n    const {t} = useTranslation();\n    \n    return (\n        <Flex flexWrap={'nowrap'} spacing={5} alignItems={'center'} className={css.MetricsCellChild}>\n            <Flex bColumn spacing={1} flex={1} justifyContent={'center'}> \n                <h4>{t('sessions.default')}</h4>\n                <ProgressBar color={'primary'} max={session.metrics?.memoryAllocated} now={session.metrics?.memoryUsed!}>\n                <span>{'MEM: '+(session.metrics?.memoryUsed || 0)+'MB'}</span>\n                <small>({session.metrics!['memoryUsed.MIN']||0}|{session.metrics!['memoryUsed.AVG']||0}|{session.metrics!['memoryUsed.MAX']||0})</small>\n                </ProgressBar>\n                <ProgressBar color={'success'} now={session.metrics?.cpuUtilization!}>\n                {'CPU: '+(session.metrics?.cpuUtilization!||0) +'% '}\n                <small>({session.metrics!['cpuUtilization.MIN']||0}|{session.metrics!['cpuUtilization.AVG']||0}|{session.metrics!['cpuUtilization.MAX']||0})</small>\n                </ProgressBar>\n            </Flex>\n            <Flex bColumn spacing={1} flex={1} justifyContent={'center'}> \n                <h4>{t('sessions.bandwidth')}</h4>\n                <ProgressBar color={'success'} max={102400} now={session.metrics?.inboundSize!}>\n                {'IN: '+(Math.round((session.metrics!.inboundSize/1024)||0))+'k/s'}\n                <small>({Math.round(session.metrics!['inboundSize.MIN']/1024)}|{Math.round(session.metrics!['inboundSize.AVG']/1024)}|{Math.round(session.metrics!['inboundSize.MAX']/1024)})</small>\n                </ProgressBar>\n                <ProgressBar color={'primary'} max={102400} now={session.metrics!?.outboundSize!}>\n                {'OUT: '+((Math.round(session.metrics!.outboundSize/1024)))+'k/s'}\n                <small>({Math.round(session.metrics!['outboundSize.MIN']/1024)}|{Math.round(session.metrics!['outboundSize.AVG']/1024)}|{Math.round(session.metrics!['outboundSize.MAX']/1024)})</small> \n                </ProgressBar>\n            </Flex>\n            <Flex bColumn spacing={1} flex={1} justifyContent={'center'}> \n                <h4>{t('sessions.latency')}</h4>\n                <ProgressBar color={'danger'} max={700} now={session.metrics!.latency!}>\n                {'E2E: '+(session.metrics!.latency||0)+'ms'}\n                <small>({session.metrics!['latency.MIN']||0}|{session.metrics!['latency.AVG']||0}|{session.metrics!['latency.MAX']||0})</small>\n                </ProgressBar>\n                <ProgressBar color={'danger'} max={500} now={session.metrics!?.latencyPing!}>\n                {'PING: '+(session.metrics!.latencyPing||0)+'ms'}\n                <small>({session.metrics!['latencyPing.MIN']||0}|{session.metrics!['latencyPing.AVG']||0}|{session.metrics!['latencyPing.MAX']||0})</small>\n                </ProgressBar>\n            </Flex>\n        </Flex>\n    )\n}","import React, { useState } from \"react\";\nimport cx from 'classnames';\nimport css from '../Sessions.module.scss';\nimport { SwingSession } from \"@/gen\";\nimport { Dialog, Icon } from \"@/components\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStore } from \"@/stores\";\nimport { Warnings } from \"@/views/SessionView/partials/Warnings\";\nimport { useTranslation } from \"react-i18next\";\n// OS\n\n\n\n\ninterface IWarningsCellProps {\n    session:SwingSession,\n    bFinished?:boolean,\n}\n\nexport const WarningsCell = ({session, bFinished=false}:IWarningsCellProps) => {\n    const { sessionsStore } = useStore();\n    const history = useHistory();\n    const {t} = useTranslation();\n    const [warningOpen, setWarningOpen] = useState<boolean>(false)\n\n    const viewWarnings = (session: SwingSession) => {\n        if (sessionsStore.getWarningsNum(session) && !bFinished) {\n            history.push('/sessions' + session.applicationPath +'/'+ session.id, {previous:history.location.pathname})\n            sessionsStore.setActiveTab('warnings');\n        }\n        if (sessionsStore.getWarningsNum(session) && bFinished) {\n            setWarningOpen(b=>!b)\n        }\n        return\n    }\n\n    return (\n        <>\n            <div className={cx(css.Cell, css.warningsCell, {[css.has]:sessionsStore.getWarningsNum(session)})} onClick={()=>viewWarnings(session)}>\n                <Icon name='warning' /> \n                {sessionsStore.getWarningsNum(session) ? t('sessions.warningWithCount', {count: sessionsStore.getWarningsNum(session)}) : t('sessions.noWarnings') }\n            </div>\n            <Dialog\n                bOpen={warningOpen}\n                title={t('sessions.warning_plural')}\n                onToggle={(b:boolean)=>setWarningOpen(b)}\n                footer={false}\n            >\n                <Warnings session={session} />\n            </Dialog>\n      </>\n    )\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { IColumns, TableVirtualized } from \"@/components\";\nimport { useStore } from \"@/stores\";\nimport { SwingSession } from \"@/gen\";\nimport { ActionCell } from \"./ActionCell\";\nimport { dateFormat, useRootOverflow, _debounce } from \"@/utils\";\nimport css from '../Sessions.module.scss'\nimport cx from 'classnames';\nimport { MetricsCell } from \"./MetricsCell\";\nimport { UserCell } from \"./UserCell\";\nimport { AppCell } from \"./AppCell\";\nimport { WarningsCell } from \"./WarningsCell\";\nimport { useHistory } from \"react-router-dom\";\nimport { StatusCell } from \"./StatusCell\";\n\ninterface ISessionsTableProps {\n    cols: IColumns<SwingSession>[]\n    app:string\n    isMetricColVisible: boolean\n}\n\nexport const SessionsTable = observer(({cols, isMetricColVisible}:ISessionsTableProps) => {\n    const history = useHistory();\n    const { sessionsStore } = useStore();\n    const [resizeWidth, setResizeWidth] = useState(window.innerWidth);\n    const tab = sessionsStore.sessionsTab as 'sessions' | 'closedSessions'; \n    \n    const view = useCallback((params) => {\n        history.push('/sessions' + params.rowData.applicationPath +'/'+ params.rowData.id,{previous:history.location.pathname})\n        sessionsStore.setActiveTab('view');\n    },[history, tab])\n\n    useRootOverflow();\n\n    useEffect(() => {\n        window.addEventListener('resize', resize);\n\n        return () => {\n            window.removeEventListener('resize', resize)\n        };\n    },[]);\n\n    const resize = _debounce(()=>setResizeWidth(window.innerWidth))\n\n    const filteredList = sessionsStore.filteredSessionsList\n    // !sessionsStore.searchTerm\n    // ? sessionsStore.sessions![tab]\n    // : (sessionsStore.sessions![tab]as any[])?.filter(item =>\n    //     item.application?.toLowerCase().includes(sessionsStore.searchTerm.toLocaleLowerCase())||\n    //     item.id?.toLowerCase().includes(sessionsStore.searchTerm.toLocaleLowerCase()) ||\n    //     item.user?.toLowerCase().includes(sessionsStore.searchTerm.toLocaleLowerCase()) ||\n    //     item.status?.toLowerCase().includes(sessionsStore.searchTerm.toLocaleLowerCase())\n    // );\n\n    let tableMinWidth = 20;\n\n    cols.forEach((column) => {\n        if(column.isVisible) tableMinWidth += column.minWidth || 0;\n    });\n\n    return (\n        <div style={{overflowX: 'auto'}}>\n            <TableVirtualized\n                key={resizeWidth}\n                collection={filteredList}\n                minTableWidth={tableMinWidth}\n                // bLoading={sessionsStore.loading}\n                rowHeight={isMetricColVisible?100:60}\n                rowClassName={css.ac}\n                threshold={500}\n                columns={tab === 'sessions'?cols?.filter(column => sessionsStore.visibleColumns.includes(column.dataKey)): cols}\n                onRowDoubleClick={view}\n                onRowRightClick={view}\n                className={cx(css.tableHeight, css.vTable)}\n                // onReachEnd={nextPage}\n            />\n        </div>\n    )\n})\n\nexport const useSessionsColumnsForTab = (tab: 'sessions' | 'idleSessions' | 'closedSessions' | 'recordings' | 'threadDumps', t: any): [IColumns<SwingSession>[], (col: IColumns<SwingSession>[]) => void] => {\n    const [columns, setColumns] = useState<IColumns<SwingSession>[]>([])\n    const { sessionsStore } = useStore();\n    const defaultColumns: IColumns<SwingSession>[] = [\n        {\n            dataKey: 'applicationPath',\n            label: '',\n            align: 'start',\n            minWidth: 35,\n            width: 35,\n            className: css.actionCell,\n            component: (id, row) => <ActionCell session={row} />,\n        },\n        {\n            dataKey: 'application',\n            label: t('sessions.app'),\n            minWidth: 200,\n            align: 'start',\n            bSort:true,\n            className: cx(css.defaultCell, css.gridAppCell),\n            component: (app, row) => <AppCell session={row} />\n        },\n        {\n            dataKey: 'user',\n            label: t('logs.user'),\n            minWidth: 100,\n            align: 'start',\n            bSort:true,\n            component: (user, row) => <UserCell session={row} />\n        },\n        {\n            dataKey: 'userIp',\n            label: t('logs.ip'),\n            minWidth: 100,\n            align: 'start',\n            className: css.defaultCell,\n        },\n        {\n            dataKey: 'startedAt',\n            label: t('sessions.startTime'),\n            minWidth: 140,\n            align: 'start',\n            bSort:true,\n            component: (startedAt) => <div className={css.Cell}>{dateFormat(Number(startedAt))}</div>\n        },\n    ];\n    const status: IColumns<SwingSession> = {\n        dataKey: 'connected',\n        label: t('general.status'),\n        align: 'start',\n        minWidth: 115,\n        bSort:true,\n        component: (connected,row) => <StatusCell session={row} />\n    }\n    const warnings: IColumns<SwingSession> = {\n        dataKey: 'warnings',\n        label: t('sessions.warning_plural'),\n        align: 'start',\n        minWidth: 160,\n        bSort:true,\n        component: (warnings, section) => <WarningsCell session={section} bFinished={tab !== 'sessions'}  />\n    }\n    const updateColumns = useCallback(() => {\n        const columnsSet = [...defaultColumns];\n        switch(tab) {\n            case 'sessions': {\n                columnsSet.push(status); \n                columnsSet.push(warnings); \n                columnsSet.push(\n                    {\n                    dataKey: 'metrics',\n                    label: t('sessions.metrics'),\n                    align: 'start',\n                    minWidth: 500,\n                    className: css.actionCell,\n                    component: (id, row) => (\n                        <MetricsCell session={row} />\n                        ),\n                    },\n                    {\n                        dataKey: 'sessionPoolId',\n                        label: t('sessions.spId'),\n                        minWidth: 278,\n                        align: 'start',\n                        className: css.defaultCell,\n                    },\n                    {\n                        dataKey: 'pid',\n                        label: t('sessions.processId'),\n                        minWidth: 100,\n                        align: 'start',\n                        className: css.defaultCell,\n                    },\n                    {\n                        dataKey: 'id',\n                        label: t('sessions.instanceId'),\n                        minWidth: 340,\n                        align: 'start',\n                        className: css.defaultCell,\n                    },\n                );\n                columnsSet.forEach((col)=> {\n                    col.isVisible = sessionsStore.visibleColumns.includes(col.dataKey) ? true : false\n                })\n                break;\n                }\n                case 'closedSessions': {\n                    columnsSet.push({\n                        dataKey: 'endedAt',\n                        label: t('sessions.endTime'),\n                        align: 'start',\n                        minWidth: 140,\n                        bSort: true,\n                        isVisible: true,\n                        component: (endedAt) => <div className={css.Cell}>{dateFormat(Number(endedAt))}</div>\n                    }); \n                    columnsSet.push(status); \n                    columnsSet.push(warnings); \n                break; \n            } \n            default: { \n                break; \n            } \n        }\n        setColumns(columnsSet);\n    }, [defaultColumns, tab]);\n    useEffect(() => {\n        updateColumns()\n    },[tab]);\n    return [columns, (col: IColumns<SwingSession>[]) => setColumns(col)];\n  }\n","// .core\nimport React from 'react'\nimport cx from 'classnames'\nimport { observer } from 'mobx-react'\nimport { useTranslation } from 'react-i18next'\n// components\nimport { Card, AvatarWithTitle, Flex, StatusBar } from '@/components'\n// styles\nimport css from './AppHeader.module.scss'\n// utils\nimport { ApiServerUrl } from '@/utils'\n// stores\nimport { useStore } from '@/stores'\n\ninterface IAppHeaderProps {\n  app:string,\n  className?: string,\n  onClick?(): void\n}\n\nexport const AppHeader = observer(function AppHeader({\n  app,\n  className,\n  onClick,\n}: IAppHeaderProps) {\n  const {globalStore, sessionsStore} = useStore();\n  const sessions = sessionsStore.sessions\n  const appObject = globalStore.paths?.find(path=>path.path===`/${app}`)\n  const {t} = useTranslation()\n  \n  return (\n    <Card className={cx(css.root, className)} onClick={onClick}>\n      <Flex style={{padding: '0 1rem'}}>\n        <Flex bColumn className={css.AvatarCol} flex={2}>\n          {\n            appObject ?\n            <>\n              <AvatarWithTitle\n                size='medium'\n                src={ApiServerUrl + \"/\" + app + '/rest/appicon'}\n                title={appObject?.name}\n              />\n            </>\n            :\n            <AvatarWithTitle\n              size='medium'\n              icon='apps'\n              title={'All Sessions'}\n            />\n          }\n        </Flex>\n        {\n          appObject !== undefined && <>\n            <Flex bColumn flex={1} className={css.smCol} justifyContent={'center'} >\n              <span className={css.label}>{t('general.status')}:</span>\n              <StatusBar status={appObject?.status!} loadMessage={''} />\n            </Flex>\n            <Flex bColumn flex={1} className={css.smCol} justifyContent={'center'}>\n              <span className={css.label}>{t('apps.path')}:</span>\n              <a href={appObject?.url} target='_blank' rel=\"noreferrer\">{appObject?.path}</a>\n            </Flex>\n          </>\n        }\n        <Flex bColumn flex={1} className={css.smCol} justifyContent={'center'}>\n          <span className={css.label}>{t('status.running')}:</span>\n          {sessions.sessions?.length}\n        </Flex>\n        <Flex bColumn flex={1} className={css.smCol} justifyContent={'center'}>\n          <span className={css.label}>{t('status.idle')}:</span>\n          {sessions.idle?.length}\n        </Flex>\n        <Flex bColumn flex={1} className={css.smCol} justifyContent={'center'}>\n          <span className={css.label}>{t('status.finished')}:</span>\n          {sessions.closedSessions?.length}\n        </Flex>\n      </Flex>\n    </Card>\n  )\n})\n","// .core\nimport React from 'react'\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom'\nimport { observer } from 'mobx-react';\n// components\nimport {  ButtonIcon, Flex} from '@/components';\n// i18n\nimport i18n from '@/i18n'\n// styles\nimport css from '../Sessions.module.scss'\n//stores\nimport { useStore } from '@/stores';\n\n\ntype TabsType = 'sessions' | 'idleSessions' | 'closedSessions' | 'recordings' | 'threadDumps';\ninterface TabButtonsProps {\n    tab: TabsType\n    onChangeTab: (tab: TabsType) => void\n}\n\nexport const TabButtons = observer(({onChangeTab, tab}:TabButtonsProps) => {\n    const { permissionsStore, sessionsStore } = useStore();\n    const {app} = useParams<{app:string}>();\n    const {t} = useTranslation()\n\n    const changeTab = (tab: TabsType) => {\n        onChangeTab(tab)\n    }\n\n    return (\n        <Flex className={css.btnstab}> \n            {sessionsStore.shouldShowIdle() &&\n                <ButtonIcon\n                    className={css.rightSpace}\n                    icon='hourglass_empty' \n                    active={'idleSessions' === tab} \n                    onClick={()=>changeTab('idleSessions')}\n                    >\n                    {t('status.idle')}\n                </ButtonIcon>\n            }\n            <ButtonIcon \n                className={css.rightSpace}\n                icon='check' \n                active={'sessions' === tab} \n                onClick={()=>changeTab('sessions')}\n                >\n                {t('status.running')}\n            </ButtonIcon>\n            <ButtonIcon\n                className={css.rightSpace}\n                icon='timer' \n                active={'closedSessions' === tab} \n                onClick={()=>changeTab('closedSessions')}\n                >\n                {t('status.finished')}\n            </ButtonIcon>\n            {\n                app && permissionsStore.get('playbackRecording') &&\n                <ButtonIcon\n                    className={css.rightSpace}\n                    icon='videocam' \n                    active={'recordings' === tab} \n                    onClick={()=>changeTab('recordings')}\n                    >\n                    {t('sessions.tab.recordings')}\n                </ButtonIcon>\n            }\n            {\n                app && permissionsStore.get('getThreadDump') &&\n                <ButtonIcon\n                    className={css.rightSpace}\n                    icon='view_list' \n                    active={'threadDumps' === tab} \n                    onClick={()=>changeTab('threadDumps')}\n                >\n                    {t('sessions.tab.threadDumps')}\n                </ButtonIcon>\n            }\n        </Flex>\n    )\n})","import { observer } from \"mobx-react\";\nimport React, { Fragment, useState } from \"react\";\nimport cx from 'classnames';\nimport css from '../Sessions.module.scss'\nimport { Button, Flex, Popover, Switch } from \"@/components\";\n\ninterface IsSelectorProps {\n    columns: any, \n    onColumnVisibilityChange: (dataKey:string)=>void\n}\n\nexport const ColumnSelector = observer(({ columns, onColumnVisibilityChange }: IsSelectorProps) => {\n    const [expandSelector, setExpandSelector] = useState(false);\n    return (\n        <div title=\"Choose column\" className={css.colSelector}>\n            <Button color='neutral' icon={'view_week'} onClick={()=>setExpandSelector(v=>!v)} />\n            <Popover\n                darkBP\n                backdrop\n                width={240}\n                className={cx(css.selPopover)}\n                open={expandSelector}\n                side=\"right\"\n                onBlur={()=>setExpandSelector(v=>!v)}>\n                <Flex bColumn spacing={2}  justifyContent={'center'} style={{margin:'1rem'}}>\n                    {columns.map((column: any, index: number) => (\n                    <Fragment key={index}>\n                        {column.label && (\n                            <Switch disabled={column.label === 'Application'} value={column.isVisible} onClick={() => onColumnVisibilityChange(String(column.dataKey))}>\n                                <span style={{cursor:'pointer'}} onClick={() => {\n                                    if(column.label === 'Application') return\n                                    onColumnVisibilityChange(String(column.dataKey))\n                                }}>{column.label}</span>\n                            </Switch>\n                        )}\n                    </Fragment>\n                    ))}\n                </Flex>\n            </Popover>\n        </div>\n    );\n})","import React, { useCallback, useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { IColumns, TableVirtualized, Tooltip } from \"@/components\";\nimport { useStore } from \"@/stores\";\nimport { IdleSession } from \"@/gen\";\nimport { dateFormat, useRootOverflow } from \"@/utils\";\nimport css from '../Sessions.module.scss'\nimport cx from 'classnames';\nimport { useTranslation } from \"react-i18next\";\n\ninterface IIdleSessionsTableProps {\n    app:string;\n}\n\nexport const IdleSessionsTable = observer(({app}:IIdleSessionsTableProps) => {\n    const { sessionsStore } = useStore();\n    const {t} = useTranslation();\n    const [columns, setColumns] = useState<IColumns<IdleSession>[]>([])\n    \n    const defaultColumns: IColumns<IdleSession>[] = [\n        {\n            dataKey: 'application',\n            label: t('sessions.app'),\n            align: 'start',\n            width: 300,\n            className: css.defaultCell,\n        },\n        {\n            dataKey: 'id',\n            label: t('sessions.instanceId'),\n            minWidth: 400,\n            align: 'start',\n            className: css.defaultCell,\n            component: (id) => (\n                <Tooltip content={t('sessions.instance') + ' ' + t('sessions.id') + ': '+ id}>\n                    <span>\n                        { id }\n                    </span>\n                </Tooltip>\n            )\n        },\n        {\n            dataKey: 'sessionPoolId',\n            label: t('sessions.spId'),\n            minWidth: 280,\n            align: 'start',\n            className: css.defaultCell,\n        },\n        {\n            dataKey: 'startedAt',\n            label: t('sessions.startTime'),\n            minWidth: 135,\n            align: 'start',\n            bSort:true,\n            component: (startedAt) => <div className={css.Cell}>{dateFormat(Number(startedAt))}</div>\n        },\n    ];\n\n    const updateColumns = useCallback(() => {\n        setColumns([...defaultColumns]);\n    }, [defaultColumns]);\n\n    useRootOverflow();\n\n    useEffect(() => {\n        updateColumns()\n    }, []);\n\n    const filteredList = !sessionsStore.searchTerm\n    ? sessionsStore.sessions!.idle\n    : (sessionsStore.sessions!.idle as any[])?.filter(item =>\n        item.application?.toLowerCase().includes(sessionsStore.searchTerm.toLocaleLowerCase()) ||\n        item.id?.toLowerCase().includes(sessionsStore.searchTerm.toLocaleLowerCase())\n    );\n\n    return (\n        <div style={{overflowX: 'auto'}}>\n            <TableVirtualized\n                collection={filteredList}\n                minTableWidth={1055}\n                rowHeight={60}\n                rowClassName={css.ac}\n                threshold={500}\n                columns={columns}\n                className={cx(css.tableHeight, css.vTable)}\n            /> \n        </div>\n    )\n})\n","// .core\nimport React, { useCallback, useEffect} from 'react'\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom'\nimport { observer } from 'mobx-react';\nimport cx from 'classnames';\n// components\nimport { Button, Icon, Flex, SearchFilter, IColumns} from '@/components';\n// i18n\nimport i18n from '@/i18n'\n// styles\nimport css from './Sessions.module.scss'\nimport cssTab from '@/components/containers/Tabs/Tabs.module.scss';\n//stores\nimport { useStore } from '@/stores';\n//utils & partials\nimport { changeTitle } from '@/views/routes';\nimport { SessionsTable, useSessionsColumnsForTab } from './partials/SessionsTable';\nimport { RecordingsTable } from './partials/RecordingsTable';\nimport { AppHeader } from './partials/AppHeader/AppHeader';\nimport { ThreadDumpsTable } from './partials/ThreadDumpsTable';\nimport { TabButtons } from './partials/TabButtons';\nimport { SwingSession } from '@/gen';\nimport { ColumnSelector } from './partials/ColumnSelector';\nimport { IdleSessionsTable } from './partials/IdleSessionsTable';\n\nconst Sessions = observer(() => {\n    const {globalStore, sessionsStore, permissionsStore } = useStore();\n    const {app} = useParams<{app:string}>();\n    const {t} = useTranslation();\n    const [columns, setColumns] = useSessionsColumnsForTab(sessionsStore.sessionsTab, t);\n\n    const handleColumnVisibilityChange = (dataKey: string) => {\n        const updatedColumns = columns.map(column =>\n          column.dataKey === dataKey ? { ...column, isVisible: !column.isVisible } : column\n        );\n        sessionsStore.setVisibleColumns(updatedColumns.filter(col => col.isVisible).map(col => col.dataKey))\n        setColumns(updatedColumns as IColumns<SwingSession>[])\n    }\n\n    const changeTab = useCallback((tab: 'sessions' | 'idleSessions' | 'closedSessions' | 'recordings' | 'threadDumps') => {\n        sessionsStore.setSessionsTab(tab);\n        //loadIssues(1, 'active' === tab ? 'ListActive' : 'ListHistory')\n        if(tab==='closedSessions') {\n            sessionsStore.setExtendTableToggle(false)\n        }\n    }, [sessionsStore.setSessionsTab])\n\n    const handleSeach = (event:React.ChangeEvent<HTMLInputElement>) => {\n        sessionsStore.setSearchTerm(event.target.value);\n    };\n\n    useEffect(() => {\n        if (!app && (sessionsStore.sessionsTab === 'recordings' || sessionsStore.sessionsTab === 'threadDumps')) {\n            sessionsStore.setSessionsTab('sessions');\n        }\n        globalStore.updateApp(app);\n        sessionsStore.setAppPath(app);\n        sessionsStore.refresh();\n        return () => sessionsStore.clearInterval();\n    },[app, sessionsStore.sessionsTab]);\n\n    changeTitle(i18n.t('routes.sessions'));\n\n    return (\n        <div className={css.root}>\n            <AppHeader app={app} />\n            <Flex className={css.headerRow} justifyContent=\"space-between\" alignItems=\"center\">\n                <TabButtons tab={sessionsStore.sessionsTab} onChangeTab={changeTab} />\n                <Flex spacing={3}>\n                    \n                    <Button.UI color={'neutral'} className={cx(cssTab.wTab,css.refresh)} onClick={()=>sessionsStore.refresh()} >\n                        <Icon size='small' name=\"cached\" /> {sessionsStore.lastUpdated}\n                    </Button.UI>\n                    {!sessionsStore.filterToggle && <Button color='neutral' icon={'search'} onClick={()=>sessionsStore.setFilterToggle()} /> } \n                    {sessionsStore.filterToggle && <SearchFilter inputClassName={css.inputHeight} value={sessionsStore.searchTerm} onChange={handleSeach} onClose={()=>sessionsStore.setFilterToggle()} />}\n                    {\n                        sessionsStore.sessionsTab==='sessions'&&\n                        <ColumnSelector columns={columns} onColumnVisibilityChange={handleColumnVisibilityChange} />\n                    }\n                </Flex>\n            </Flex>\n            {\n                (sessionsStore.sessionsTab === 'sessions' || sessionsStore.sessionsTab === 'closedSessions') && <SessionsTable cols={columns} app={app} isMetricColVisible={columns.some((col)=>col.dataKey === 'metrics' && col.isVisible)} />\n            }\n            {\n                (sessionsStore.sessionsTab === 'idleSessions') && <IdleSessionsTable app={app} />\n            }\n            {\n                (sessionsStore.sessionsTab === 'recordings') && permissionsStore.get('playbackRecording') && <RecordingsTable app={app} />\n            }\n            {\n                (sessionsStore.sessionsTab === 'threadDumps') && permissionsStore.get('getThreadDump') && <ThreadDumpsTable app={app} />\n            }\n        </div>\n    )\n})\n\nexport default Sessions"],"names":["ProgressBar","color","label","children","now","min","max","className","onClick","calculated","setCalculated","useState","getPercentage","percentage","useEffect","cx","css","jsx","MetricsCell","session","t","useTranslation","jsxs","Flex","_a","_b","_c","_d","_e","_f","_g","_h","WarningsCell","bFinished","sessionsStore","useStore","history","useHistory","warningOpen","setWarningOpen","viewWarnings","b","Fragment","Icon","Dialog","Warnings","SessionsTable","observer","cols","isMetricColVisible","resizeWidth","setResizeWidth","tab","view","useCallback","params","useRootOverflow","resize","_debounce","filteredList","tableMinWidth","column","TableVirtualized","useSessionsColumnsForTab","columns","setColumns","defaultColumns","id","row","ActionCell","app","AppCell","user","UserCell","startedAt","dateFormat","status","connected","StatusCell","warnings","section","updateColumns","columnsSet","col","endedAt","AppHeader","globalStore","sessions","appObject","path","Card","AvatarWithTitle","ApiServerUrl","StatusBar","TabButtons","onChangeTab","permissionsStore","useParams","changeTab","ButtonIcon","ColumnSelector","onColumnVisibilityChange","expandSelector","setExpandSelector","Button","v","Popover","index","Switch","IdleSessionsTable","Tooltip","item","Sessions","handleColumnVisibilityChange","dataKey","updatedColumns","handleSeach","event","changeTitle","i18n","cssTab","SearchFilter","RecordingsTable","ThreadDumpsTable"],"mappings":"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"}