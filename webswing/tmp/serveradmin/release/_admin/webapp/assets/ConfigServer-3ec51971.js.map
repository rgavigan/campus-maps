{"version":3,"file":"ConfigServer-3ec51971.js","sources":["../../src/views/Overview/ConfigServer.tsx"],"sourcesContent":["// core\nimport { useState, useEffect } from 'react';\nimport cx from 'classnames';\n// components\nimport { StatusBar } from '@/components'\nimport FormiumConfig from '../Applications/Partials/FormiumConfig'\n// routes\nimport { changeTitle } from '../routes';\n// utils\nimport { ApiServerUrl, hiddenServerConfigFields } from '@/utils'\n// styles\nimport css from '../Applications/Applications.module.scss'\nimport { useStore } from '@/stores';\nimport { observer } from 'mobx-react';\nimport { ButtonGroup } from '@/components/basic/Button/variants/ButtonGroup/ButtonGroup';\nimport { useTranslation } from 'react-i18next';\n\nconst ConfigServer = observer(() => {\n  const {permissionsStore, globalStore, configStore } = useStore()\n  const [loadingMessage, setLoadingMessage] = useState<string>('loading..');\n  const {t,i18n} = useTranslation();\n  useEffect(() => {\n    configStore.loadConfig();\n    globalStore.loadInfo().then(()=> {\n      setLoadingMessage('');\n    });\n    globalStore.updateApp('');\n\n    return () => {\n      configStore.clearConfigData()\n    }\n  },[]);\n\n  changeTitle(i18n.t('routes.serconfig'));\n\n  return (\n    <>\n      <div className={css.StatusPanel}>\n        <span className={css.StatusPanelLabel}>Status: </span>\n          <StatusBar status={globalStore.info?.status!} loadMessage={loadingMessage} />\n      </div>\n      <FormiumConfig\n        readonly={!permissionsStore.get('configEdit')} \n        identify={'serverConfig'} \n        path={ApiServerUrl}\n        value={configStore.config?.webConfig} \n        hide={hiddenServerConfigFields}\n        translations={i18n.getDataByLanguage(i18n.language)?.translation}\n        lang={i18n.language}\n      />\n      <ButtonGroup\n        className={cx(css.floatingButtons,{[css.activeApply]: configStore.activeApply})}\n        buttons={\n          [\n            {label: i18n.t('Apply'),size:'small', color:'blue', onClick: ()=>configStore.setConfig()},\n            {label:i18n.t('Reset'),size:'small', color:'white', onClick: ()=>configStore.resetConfig()}\n          ]\n        } \n      />\n    </>\n  )\n})\n\nexport default ConfigServer"],"names":["ConfigServer","observer","permissionsStore","globalStore","configStore","useStore","loadingMessage","setLoadingMessage","useState","t","i18n","useTranslation","useEffect","changeTitle","jsxs","Fragment","css","jsx","StatusBar","_a","FormiumConfig","ApiServerUrl","_b","hiddenServerConfigFields","_c","ButtonGroup","cx"],"mappings":"oRAiBM,MAAAA,EAAeC,EAAS,IAAM,WAClC,KAAM,CAAC,iBAAAC,EAAkB,YAAAC,EAAa,YAAAC,GAAgBC,EAAS,EACzD,CAACC,EAAgBC,CAAiB,EAAIC,WAAiB,WAAW,EAClE,CAAC,EAAAC,EAAE,KAAAC,CAAI,EAAIC,EAAe,EAChCC,OAAAA,EAAAA,UAAU,KACRR,EAAY,WAAW,EACXD,EAAA,WAAW,KAAK,IAAK,CAC/BI,EAAkB,EAAE,CAAA,CACrB,EACDJ,EAAY,UAAU,EAAE,EAEjB,IAAM,CACXC,EAAY,gBAAgB,CAAA,GAE9B,CAAE,CAAA,EAEQS,EAAAH,EAAK,EAAE,kBAAkB,CAAC,EAIlCI,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACD,EAAA,KAAA,MAAA,CAAI,UAAWE,EAAI,YAClB,SAAA,CAAAC,EAAA,IAAC,OAAK,CAAA,UAAWD,EAAI,iBAAkB,SAAQ,WAAA,QAC5CE,EAAU,CAAA,QAAQC,EAAAhB,EAAY,OAAZ,YAAAgB,EAAkB,OAAS,YAAab,EAAgB,CAAA,EAC/E,EACAW,EAAA,IAACG,EAAA,CACC,SAAU,CAAClB,EAAiB,IAAI,YAAY,EAC5C,SAAU,eACV,KAAMmB,EACN,OAAOC,EAAAlB,EAAY,SAAZ,YAAAkB,EAAoB,UAC3B,KAAMC,EACN,cAAcC,EAAAd,EAAK,kBAAkBA,EAAK,QAAQ,IAApC,YAAAc,EAAuC,YACrD,KAAMd,EAAK,QAAA,CACb,EACAO,EAAA,IAACQ,EAAA,CACC,UAAWC,EAAGV,EAAI,gBAAgB,CAAC,CAACA,EAAI,WAAW,EAAGZ,EAAY,YAAY,EAC9E,QACE,CACE,CAAC,MAAOM,EAAK,EAAE,OAAO,EAAE,KAAK,QAAS,MAAM,OAAQ,QAAS,IAAIN,EAAY,WAAW,EACxF,CAAC,MAAMM,EAAK,EAAE,OAAO,EAAE,KAAK,QAAS,MAAM,QAAS,QAAS,IAAIN,EAAY,aAAa,CAC5F,CAAA,CAEJ,CACF,CAAA,CAAA,CAEJ,CAAC"}