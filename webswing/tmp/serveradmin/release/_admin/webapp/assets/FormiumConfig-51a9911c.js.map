{"version":3,"file":"FormiumConfig-51a9911c.js","sources":["../../src/utils/constants.ts","../../src/views/Applications/Partials/FormiumConfig.tsx"],"sourcesContent":["// styles\nimport scssVariables from '@/styles/_colors.module.scss'\n\nexport const gColors = scssVariables\n\nexport const hiddenServerConfigFields = [\n    \"path\"\n];\nexport const hiddenWebConfigFields = [\n    \"path\"\n];","// core\nimport React from 'react'\nimport Formium from 'formium-component';\n//import Formium from '../../../../../../webswing-formium/formium-js/build/formium';\n// services\nimport { ConfigService} from '@/services';\n\n// components\nimport { IComponentProps } from '@/components'\n\n// styles\nimport { MetaObject, ResolveTypeEnum, SearchVariablesTypeEnum } from '@/gen';\nimport { store } from '@/stores';\nimport css from './FormiumConfig.module.scss';\nimport { escapeHtml } from '@/utils';\n\n\nexport interface IFormiumProps extends IComponentProps {\n    identify: string,\n    path?: string,\n    value?: MetaObject,\n    list?: { [key: string]: MetaObject; },\n    variables?: string[],\n    readonly: boolean,\n    istab?: boolean,\n    hide?: string[]\n    onConfigChange?: any\n    translations?:any\n    lang?:string\n    // onRequestUpdate?: any\n}\n\nexport default class FormiumConfig extends React.Component<IFormiumProps> {\n    private formiumRef = React.createRef<HTMLDivElement>()\n    private form: Formium | undefined\n    \n    constructor(props: IFormiumProps) {\n        super(props);\n    }\n\n    componentDidMount() {\n        setTimeout(()=>{\n            this.form = new Formium({\n                \"target\": this.formiumRef.current as HTMLElement,\n                \"props\": {\n                  \"value\": this.props.value,\n                  \"list\": this.props.list,\n                  \"readonly\": this.props.readonly,\n                  \"identify\": this.props.identify,\n                  \"hiddenConfigFields\": this.props.hide || [],\n                  \"translations\": this.props.translations,\n                  \"lang\": this.props.lang\n                }\n            });\n    \n            this.form.$on('requestUpdate', (event: any) => {\n                store.configStore.onRequestUpdate(this.props.path!);\n            });\n            \n            this.form.$on('configChange', (event: any) => {\n                setTimeout(()=>{\n                    store.configStore.compareConfig(this.props.identify);\n                },100)\n            });\n\n            this.form.$set({\n                onVariableSearch: (variables: SearchVariablesTypeEnum, valToSearch: string) => {\n                  const val = valToSearch;\n                  const cleanVal = val.substr(val.lastIndexOf('$'), val.length);\n                  const searchSeq = cleanVal.substr(0, 0) + cleanVal.substr(0 + 2);\n                  let id;\n                  if (this.props.identify != 'allID') {\n                      id = this.props.identify;\n                  }\n                  return ConfigService.getVariables(this.props.path!, variables, searchSeq, id).then((data: any) => {\n                    return data;\n                  });\n                }\n            });\n        \n            this.form.$set({\n                onVariableResolve: (variables: ResolveTypeEnum, valueToResolve: string) => {\n                    const val = valueToResolve;\n                    let id;\n                    if (this.props.identify != 'allID') {\n                        id = this.props.identify;\n                    }\n                    return ConfigService.resolve(this.props.path!, variables, val, id).then((data) => {\n                    let result = '';\n    \n                    if (!data || data === null) {\n                        return result;\n                    }\n    \n                    const multiVar = Object.keys(data).length > 1;\n                    if(multiVar) { \n                        result += '<ul class=\"var-res-list\">'\n                        for (const property in data) {\n                            // console.log(`${property}: ${object[property]}`);\n                            const whatAreYou = this.props.istab ? ' (on server ': ' (on session pool '\n                            result += '<li>'+ escapeHtml(property) + whatAreYou;\n                            data[property].forEach((idServer: string, i:number)=>{\n                                result += i === data[property].length-1 ? idServer : idServer + ', ';  \n                            })\n                            result+= ')</li>'\n                        }\n                        result += '</ul>'\n                    } else {\n                        result += escapeHtml(Object.keys(data)[0]);\n                    }\n                    return result;\n                    });\n                }\n            });\n        },10);\n    }\n\n    componentDidUpdate(prevProps: IFormiumProps) {\n\n        this.form?.$set({\n            readonly: this.props.readonly,\n            value: this.props.value,\n            list: this.props.list,\n            identify: this.props.identify,\n            hide: this.props.hide,\n            translations: this.props.translations,\n            lang: this.props.lang\n        })\n    }\n\n    componentWillUnmount() {\n        if(this.form) {\n            this.form.$destroy()\n        }\n    }\n  \n    render() {\n      return <div className={css.root} id={this.props.identify} ref={this.formiumRef} />\n    }\n  }"],"names":["hiddenServerConfigFields","hiddenWebConfigFields","FormiumConfig","React","props","__publicField","Formium","event","store","variables","valToSearch","val","cleanVal","searchSeq","id","ConfigService","data","valueToResolve","result","property","whatAreYou","escapeHtml","idServer","i","prevProps","_a","jsx","css"],"mappings":"wTAKO,MAAMA,EAA2B,CACpC,MACJ,EACaC,EAAwB,CACjC,MACJ,+BCsBqB,MAAAC,UAAsBC,EAAM,SAAyB,CAItE,YAAYC,EAAsB,CAC9B,MAAMA,CAAK,EAJPC,EAAA,kBAAaF,EAAM,aACnBE,EAAA,YAIR,CAEA,mBAAoB,CAChB,WAAW,IAAI,CACN,KAAA,KAAO,IAAIC,EAAQ,CACpB,OAAU,KAAK,WAAW,QAC1B,MAAS,CACP,MAAS,KAAK,MAAM,MACpB,KAAQ,KAAK,MAAM,KACnB,SAAY,KAAK,MAAM,SACvB,SAAY,KAAK,MAAM,SACvB,mBAAsB,KAAK,MAAM,MAAQ,CAAC,EAC1C,aAAgB,KAAK,MAAM,aAC3B,KAAQ,KAAK,MAAM,IACrB,CAAA,CACH,EAED,KAAK,KAAK,IAAI,gBAAkBC,GAAe,CAC3CC,EAAM,YAAY,gBAAgB,KAAK,MAAM,IAAK,CAAA,CACrD,EAED,KAAK,KAAK,IAAI,eAAiBD,GAAe,CAC1C,WAAW,IAAI,CACXC,EAAM,YAAY,cAAc,KAAK,MAAM,QAAQ,GACrD,GAAG,CAAA,CACR,EAED,KAAK,KAAK,KAAK,CACX,iBAAkB,CAACC,EAAoCC,IAAwB,CAC7E,MAAMC,EAAMD,EACNE,EAAWD,EAAI,OAAOA,EAAI,YAAY,GAAG,EAAGA,EAAI,MAAM,EACtDE,EAAYD,EAAS,OAAO,EAAG,CAAC,EAAIA,EAAS,OAAO,EAAI,CAAC,EAC3D,IAAAE,EACA,OAAA,KAAK,MAAM,UAAY,UACvBA,EAAK,KAAK,MAAM,UAEbC,EAAc,aAAa,KAAK,MAAM,KAAON,EAAWI,EAAWC,CAAE,EAAE,KAAME,GAC3EA,CACR,CACH,CAAA,CACH,EAED,KAAK,KAAK,KAAK,CACX,kBAAmB,CAACP,EAA4BQ,IAA2B,CACvE,MAAMN,EAAMM,EACR,IAAAH,EACA,OAAA,KAAK,MAAM,UAAY,UACvBA,EAAK,KAAK,MAAM,UAEbC,EAAc,QAAQ,KAAK,MAAM,KAAON,EAAWE,EAAKG,CAAE,EAAE,KAAME,GAAS,CAClF,IAAIE,EAAS,GAET,GAAA,CAACF,GAAQA,IAAS,KACX,OAAAE,EAIX,GADiB,OAAO,KAAKF,CAAI,EAAE,OAAS,EAC/B,CACCE,GAAA,4BACV,UAAWC,KAAYH,EAAM,CAEzB,MAAMI,EAAa,KAAK,MAAM,MAAQ,eAAgB,qBAC5CF,GAAA,OAAQG,EAAWF,CAAQ,EAAIC,EACzCJ,EAAKG,CAAQ,EAAE,QAAQ,CAACG,EAAkBC,IAAW,CACjDL,GAAUK,IAAMP,EAAKG,CAAQ,EAAE,OAAO,EAAIG,EAAWA,EAAW,IAAA,CACnE,EACQJ,GAAA,SAEHA,GAAA,aAEVA,GAAUG,EAAW,OAAO,KAAKL,CAAI,EAAE,CAAC,CAAC,EAEtC,OAAAE,CAAA,CACN,CACL,CAAA,CACH,GACH,EAAE,CACR,CAEA,mBAAmBM,EAA0B,QAEzCC,EAAA,KAAK,OAAL,MAAAA,EAAW,KAAK,CACZ,SAAU,KAAK,MAAM,SACrB,MAAO,KAAK,MAAM,MAClB,KAAM,KAAK,MAAM,KACjB,SAAU,KAAK,MAAM,SACrB,KAAM,KAAK,MAAM,KACjB,aAAc,KAAK,MAAM,aACzB,KAAM,KAAK,MAAM,IAAA,EAEzB,CAEA,sBAAuB,CAChB,KAAK,MACJ,KAAK,KAAK,UAElB,CAEA,QAAS,CACA,OAAAC,EAAA,IAAC,MAAI,CAAA,UAAWC,EAAI,KAAM,GAAI,KAAK,MAAM,SAAU,IAAK,KAAK,UAAY,CAAA,CAClF,CACF"}