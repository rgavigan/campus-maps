{"version":3,"file":"Overview-1bea8f10.js","sources":["../../src/views/Overview/partials/CounterSquare.tsx","../../src/views/Overview/partials/ServerCard.tsx","../../src/views/Overview/partials/SpPie.tsx","../../src/views/Overview/partials/AppsSPCell.tsx","../../src/views/Overview/partials/SpCard.tsx","../../src/views/Overview/partials/TableView.tsx","../../src/views/Overview/partials/ScalingCharts.tsx","../../src/views/Overview/Overview.tsx"],"sourcesContent":["// .core\nimport React from 'react'\n// libraries\nimport cx from 'classnames'\n// styles\nimport css from './CounterSquare.module.scss'\nimport { Tooltip } from '@/components'\n\ninterface ICounterSquareProps {\n  count?:number | string;\n  title: string;\n  tooltip?: string;\n  color?: 'danger' | 'neutral' | 'blue' | 'darkBlue' | 'darkerBlue' | 'lightBlue' | 'success' | 'warning';\n  className?: string,\n  onClick?(): void,\n  enabled?: boolean\n}\n\nexport const CounterSquare = ({\n  count,\n  title,\n  tooltip,\n  color='neutral',\n  className,\n  onClick,\n  enabled\n}: ICounterSquareProps) => {\n\n  const SquareContent = () => {\n    return (\n      <div onClick={onClick} className={cx(\n        css.root, \n        className,\n        {[css.cursor]:onClick},\n        {[css[color]]: enabled || (typeof count == 'number' && count)}\n      )}\n      >\n        <h3>{count}</h3>\n        <small>{title}</small>\n      </div>\n    );\n  };\n\n  return (\n      tooltip ?\n        <Tooltip content={tooltip}>\n          <span>\n            <SquareContent />\n          </span>\n        </Tooltip>\n      :\n      <SquareContent />\n  )\n}\n","// .core\nimport React, { useCallback, useState } from 'react'\n// components\nimport { Avatar, Card, CardContent, Chip, Dialog, Flex, Heading, Icon, Status } from '@/components'\n// libraries\nimport cx from 'classnames'\n// styles\nimport css from '../Overview.module.scss'\nimport cssButton from '@/components/basic/Button/variants/ButtonDefault/ButtonDefault.module.scss'\nimport {ServerInfo} from '@/gen/models'\nimport { CounterSquare } from './CounterSquare'\nimport { Dropdown } from '@/components/basic/Dropdown/Dropdown'\nimport { useHistory } from 'react-router'\nimport { useStore } from '@/stores'\nimport { observer } from 'mobx-react'\nimport { useTranslation } from 'react-i18next'\nimport { ApiServerUrl } from '@/utils'\n\ninterface IServerCardProps {\n  className?: string,\n  onClick?(): void,\n  server: ServerInfo,\n}\n\n\nexport const ServerCard = observer(({\n  server,\n}: IServerCardProps) => {\n\n  const countRunningStatus = () => {\n    let countRunning: number = 0;\n    if(server.apps) {\n      for (const app of server.apps) {\n        for (const item of app.status as any) {\n          if(item.status === 'Running') {\n            countRunning++\n          }\n        }\n      }\n    }\n    return countRunning\n  }\n\n  const squareColor = () => {\n    const running = countRunningStatus();\n    return ( running === server.apps?.length) ? 'success'\n    : running === 0 && running !== server.apps?.length ? 'danger' \n    : 'warning'\n  }\n  const getSpvsCluster = () => {\n    return countRunningStatus() + ' / ' + server.apps?.length;\n  }\n  const getSessionsCount = () => {\n    return server.instancesConnected + ' / ' + server.idle + ' / ' + server.instances;\n  }\n  const getSessionsCountCluster = () => {\n    return server.instancesConnected + ' / ' + server.instances;\n  }\n  const {logsStore, overviewStore} = useStore();\n  const history = useHistory();\n  const { t, i18n } = useTranslation();\n\n  const [openAppsDialog, setOpenAppsDialog] = useState(false)\n  const [openUsersDialog, setOpenUsersDialog] = useState(false)\n  const toggleAppsDialog = useCallback(() => {\n    setOpenAppsDialog(!openAppsDialog)\n  }, [openAppsDialog])\n  const toggleUsersDialog = useCallback(() => {\n    setOpenUsersDialog(!openUsersDialog)\n  }, [openUsersDialog])\n\n  const showLogs = useCallback((id) => {\n    logsStore.setServerLogId(id);\n    history.push('logs/server')\n  }, [history])\n\n\n  return (\n    <Card className={css.serverCard}>\n      <CardContent>\n        <Flex justifyContent='space-between'>\n          <Heading\n            variant={'h2'}\n            classes={{ heading: css.cardHeading }}\n            title={server.cluster ? server.id! : 'Webswing Server'}\n          />\n          <Dropdown\n            position='right'\n            buttons={[\n              {label: t('overview.verboseMode'), icon:'info', onClick:()=>overviewStore.toggleVerbose(server,'server')},\n              {label: t('routes.logs'), icon:'list_alt', onClick:()=>showLogs(server.id!)},\n            ]}\n            >\n              <span className={cx(cssButton.wButtonDefault,cssButton.medium, cssButton.neutral, cssButton.icon)}>\n                <Icon name={'more_vert'} />\n              </span>\n            </Dropdown>\n        </Flex>\n        <span className={css.neuralSub}>{server.websocketUrl}</span>\n        <Flex spacing={2} className={cx(css.header, {[css.chipsLine]:overviewStore.isThereAnyServerVerbose})}>\n          {\n            server.verboseLogging &&\n            <Chip size='small'>\n              <Icon name='check_circle_outline' size='mini' /> {t('overview.verboseMode')}\n            </Chip>\n          }\n        </Flex>\n        <Flex spacing={3} flexWrap={'wrap'}>\n          <CounterSquare title={t('sessions.sp_plural')} count={server.sessionPools?.length} color={'darkerBlue'} />\n          <CounterSquare title={t('overview.users')} count={server.users} color={'darkBlue'} tooltip={openUsersDialog?'':t('overview.users.tooltip')} onClick={toggleUsersDialog} />\n          { server.cluster && <CounterSquare title={t('overview.sessions')} count={getSessionsCountCluster()} color={'blue'} enabled={server!.instances! > 0} tooltip={t('overview.sessionsCluster.tooltip')} /> }\n          { !server.cluster && <CounterSquare title={t('overview.sessions')} count={getSessionsCount()} color={'blue'} enabled={server!.instances! > 0 || server!.idle! > 0} tooltip={t('overview.sessions.tooltip')} /> }\n          <CounterSquare title={t('overview.connections')} count={server.connections} color={'lightBlue'} tooltip={t('overview.connections.tooltip')} />\n          <CounterSquare title={t('overview.appsRunning')} count={getSpvsCluster()} color={squareColor()} enabled={true} onClick={toggleAppsDialog} />\n          <Dialog\n            bOpen={openAppsDialog}\n            title={t('overview.availableApps')}\n            onToggle={toggleAppsDialog}\n            footer={false}\n          >\n            <div className={css.spTable}>\n              <table>\n                <thead>\n                  <tr>\n                    <td>{t('routes.apps')}</td>\n                    <td>{t('general.status')}</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    server.apps!.map((e) => (\n                      <tr key={e.name}>\n                        <td>\n                          <Flex spacing={2}>\n                            <Avatar shape='square' src={ApiServerUrl +  e.path + '/rest/appicon'} />\n                            <div>\n                              {e.name}<small>{e.path}</small>\n                            </div>\n                          </Flex>\n                        </td>\n                        <td><Status label={e.status![0].status!} /></td>\n                      </tr>\n                    ))\n                  }\n                </tbody>\n              </table>\n            </div>\n          </Dialog>\n          <Dialog\n            bOpen={openUsersDialog}\n            title={t('overview.users')}\n            onToggle={toggleUsersDialog}\n            footer={false}\n          >\n            <div className={css.userListTable}>\n              <table>\n                <tbody>\n                  {server.userList &&\n                    server.userList!.map((user: string) => (\n                      <tr key={user}>\n                        <td>{user}</td>\n                      </tr>\n                    ))\n                  }\n                  {!server.userList &&\n                    <tr>\n                      <td>{t('overview.users.empty')}</td>\n                    </tr>\n                  }\n                </tbody>\n              </table>\n            </div>\n          </Dialog>\n        </Flex>\n      </CardContent>\n    </Card>\n  )\n})\n","// .core\nimport React, { useEffect, useState } from 'react'\n// components\nimport { Button } from '@/components'\n// styles\nimport css from '../Overview.module.scss'\nimport { Cell, Label, Pie, PieChart, Tooltip } from 'recharts'\nimport { useTranslation } from 'react-i18next'\n\ninterface IServerCardProps {\n  className?: string,\n  width?: number,\n  height?: number,\n  onClick?(): void,\n  /**\n     * \n     * @type {{ [key: string]: number; }}\n     * @memberof SessionPoolInfo\n     */\n   apps?: { [key: string]: number; }\n}\n\n\nexport const SpPie = ({\n  className,\n  width,\n  height,\n  onClick,\n  apps,\n}: IServerCardProps) => {\n  const [allZero, setAllZero] = useState(true)\n  const {t} = useTranslation()\n\n  const getSpApps = () => {\n    return Object.entries(apps!).map((e) => ( { name:e[0], value:e[1] } ));\n  }\n  const getSpSum = () => {\n    let sum:number = 0\n    Object.entries(apps!).forEach((item)=>{\n      sum += item[1]\n    });\n    return sum\n  }\n\n  useEffect(()=> {\n    setAllZero(getSpSum()?false:true);\n  },[apps]);\n\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\n  return (\n    <>\n      {/* <ResponsiveContainer width=\"100%\" height=\"100%\"> */}\n        <PieChart onClick={onClick} className={className} width={width} height={height}>\n          <Pie\n            data={allZero?[{name:'no',value:1}]:getSpApps()}\n            innerRadius={46}\n            outerRadius={58}\n            fill=\"#8884d8\"\n            paddingAngle={0}\n            dataKey=\"value\"\n          >\n            <Label \n            value={getSpSum()} position=\"centerBottom\"  className={css.cakeLabelTop} fontSize='27px'\n            />\n            <Label \n            value={t('overview.running') as string} position=\"centerTop\" className={css.cakeLabelBottom}\n            />\n            {getSpApps().map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={allZero? '#E5E5E6':COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          {!allZero && <Tooltip />}\n        </PieChart>\n      {/* </ResponsiveContainer> */}\n    </>\n  )\n}\n\nconst HeaderButton = () => <Button icon={'expand_more'}  />","// .core\nimport React, { useCallback, useState } from 'react'\n// libraries\nimport cx from 'classnames'\n// styles\nimport cssTable from '../../../components/complex/Table/Table.module.scss'\nimport css from '../Overview.module.scss'\nimport { observer } from 'mobx-react'\nimport { Dialog } from '@/components'\n\ninterface IAppsSPCellProps{\n  className?: string,\n  onClick?(): void,\n  label:string,\n  dialogHeader:string\n  children?: React.ReactNode\n}\n\nexport const AppsSPCell = observer(({className, onClick, label,dialogHeader, children}:IAppsSPCellProps)=> {\n  const [open, setOpen] = useState(false)\n  const toggle = useCallback((state?: boolean) => {\n    if (open !== state) {\n      setOpen(state ? state : !open)\n    }\n  }, [open])\n  return (\n    <>\n      <span onClick={()=>setOpen(!open)} className={cx(cssTable.wCell, css.link)} style={{justifyContent:'start'}}>\n        {label}\n      </span>\n      <Dialog\n        bOpen={open}\n        title={dialogHeader}\n        onToggle={toggle}\n        footer={false}\n      >\n        {children}\n      </Dialog>\n    </>\n  )\n})","// .core\nimport {useCallback, useState } from 'react'\n// components\nimport { Avatar, Card, CardContent, Chip, Flex, Heading, Icon } from '@/components'\n// libraries\nimport cx from 'classnames'\n// styles\nimport css from '../Overview.module.scss'\nimport cssButton from '@/components/basic/Button/variants/ButtonDefault/ButtonDefault.module.scss'\nimport {SessionPoolInfo, ServerInfo} from '@/gen/models'\nimport { SpPie } from './SpPie'\nimport { AppsSPCell } from './AppsSPCell'\nimport { Dropdown } from '@/components/basic/Dropdown/Dropdown'\nimport { useStore } from '@/stores'\nimport { useHistory } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport { ApiServerUrl } from '@/utils'\n\ninterface IServerCardProps {\n  className?: string,\n  onClick?(): void,\n  sp: SessionPoolInfo\n  clusterservers?: ServerInfo[]\n}\n\n\nexport const SpCard = ({\n  className,\n  onClick,\n  sp,\n  clusterservers=[],\n}: IServerCardProps) => {\n  const [appsToggleOpen, setAppsToggleOpen] = useState(false)\n  const {logsStore, overviewStore, globalStore} = useStore();\n  const history = useHistory();\n  const {t} = useTranslation();\n  const getSpApps = () => {\n    return Object.entries(sp.apps!).map((e) => {\n      const path = globalStore.paths?.find((path)=>path.path === e[0])\n      return { name:path?.name, path:e[0], value:e[1] }\n    });\n  }\n\n  const getSpvsCluster = () => {\n    const spApps = Object.entries(sp.apps!);\n    return spApps.length + ' / ' + clusterservers[0].apps?.length;\n  }\n  const showLogs = useCallback((id) => {\n    logsStore.setSpLogId(id);\n    history.push('logs/sessionpool')\n  }, [history])\n\n  const drainModeTxt = () => {\n    return sp.drainMode ? t('overview.resume') : t('overview.drainMode')\n  }\n\n  return (\n    <Card onClick={onClick} className={cx(css.spCard, className)}>\n    <CardContent>\n          <Flex justifyContent='space-between'>\n            <Heading\n              variant={'h2'}\n              classes={{ heading: css.cardHeading }}\n              title={sp.id!}\n            />\n            {!sp.stopped &&\n              <Dropdown\n                position='right'\n                buttons={[\n                  {label: t('overview.verboseMode'), icon:'info', onClick: () => overviewStore.toggleVerbose(sp,'sp')},\n                  {label: t('routes.logs'), icon:'list_alt', onClick: () => showLogs(sp.id!)},\n                  {label: drainModeTxt(), icon:'opacity', onClick: () => overviewStore.toggleDrain(sp)},\n                  {label: t('overview.stop'), icon:'power_settings_new', onClick: () => overviewStore.stop(sp.id!), shouldShow: !overviewStore.hasRunningInstances(sp.apps!)},\n                  {label: t('overview.shutdownSessions'), icon:'power_settings_new', onClick: () => overviewStore.shutdown(sp), shouldShow: overviewStore.hasRunningInstances(sp.apps!)}\n                  // buttons:[{label: 'Force kill sessions', onClick:()=>overviewStore.forceKill(sp.id!)}],\n                ]}\n                >\n                  <span className={cx(cssButton.wButtonDefault,cssButton.medium, cssButton.neutral, cssButton.icon)}>\n                    <Icon name={'more_vert'} />\n                  </span>\n              </Dropdown>\n            }\n          </Flex>\n          <Flex spacing={2} className={cx(css.header, {[css.chipsLine]:overviewStore.isThereAnySPVerbose})}>\n            {\n              sp.stopped ? \n              <Chip size='small' color='danger' >{t('overview.stopped')}</Chip>\n              :\n              <Chip size='small' color='success' >{t('overview.running')}</Chip>\n            }\n            {\n              sp.staticSP && <Chip size='small' tooltip={t('overview.staticSP.tooltip')}>{t('overview.staticSP')}</Chip>\n            }\n            {\n              !sp.stopped && sp.drainMode && <Chip size='small' color='warning' ><Icon name='opacity' size='mini' /> { sp.drainAutoMode ? t('overview.drainAutoMode') : t('overview.drainMode')}</Chip>\n            }\n            {\n              sp.verboseLogging &&\n              <Chip size='small'><Icon name='check_circle_outline' size='mini' /> {t('overview.verboseMode')}</Chip>\n            }\n          </Flex>\n          <Flex spacing={3} flexWrap={'wrap'}>\n            <Flex flex={1}>\n              <SpPie apps={sp.apps} width={130} height={130} />\n            </Flex>\n            <Flex flex={2}>\n              <table className={css.spTable}>\n                <tbody>\n                  <tr>\n                    <td><strong>{t('overview.maxSessions')}:</strong></td>\n                    <td>{sp.maxInstances == -1 ? t('overview.unlimited'): sp.maxInstances }</td>\n                  </tr>\n                  <tr>\n                    <td><strong>{t('overview.maxIdleSessions')}:</strong></td>\n                    <td>{sp.maxIdleInstances == -1 ? t('overview.unlimited'): sp.maxIdleInstances }</td>\n                  </tr>\n                  <tr>\n                    <td><strong>{t('overview.idleInstances')}:</strong></td>\n                    <td>{sp.idle}</td>\n                  </tr>\n                  <tr>\n                    <td><strong>{t('general.priority')}:</strong></td>\n                    <td>{sp.priority}</td>\n                  </tr>\n                  <tr onClick={()=>setAppsToggleOpen(!appsToggleOpen)}>\n                    <td><strong>{t('routes.apps')}:</strong></td>\n                    <td>\n                      {\n                        <AppsSPCell dialogHeader={t('overview.availableAppsforSP')} label={getSpvsCluster()}>\n                          <table className={css.spTable}>\n                            <thead>\n                              <tr>\n                                <td>{t('routes.apps')}</td>\n                                <td>{t('overview.running')}</td>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {appsToggleOpen && getSpApps().map((entry, index) => (\n                                <tr key={entry.name}>\n                                  <td>\n                                  <Flex spacing={2}>\n                                    <Avatar shape='square' src={ApiServerUrl +  entry.path + '/rest/appicon'} />\n                                    <div>\n                                      {entry.name}\n                                      <small>{entry.path}</small>\n                                    </div>\n                                  </Flex>\n                                  </td>\n                                  <td>{entry.value}</td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>  \n                        </AppsSPCell>\n                      }\n                      </td>\n                  </tr>\n                </tbody>\n              </table>\n            </Flex>\n          </Flex>\n    </CardContent>\n  </Card>\n  )\n}","// .core\nimport React from 'react'\n// components\nimport { Avatar, ButtonIcon, Chip, Flex, IColumns, Icon, StatusBar, TableVirtualized } from '@/components'\n// libraries\nimport cx from 'classnames'\n// styles\nimport css from '../Overview.module.scss'\nimport cssTab from '@/components/containers/Tabs/Tabs.module.scss';\nimport cssSessions from '../../Sessions/Sessions.module.scss'\nimport { BasicApplicationInfo, InstanceManagerStatus, SessionPoolInfo } from '@/gen'\nimport { AppsSPCell } from './AppsSPCell'\nimport cssTable from '../../../components/complex/Table/Table.module.scss'\nimport { Dropdown } from '@/components/basic/Dropdown/Dropdown'\nimport { observer } from 'mobx-react'\nimport { useStore } from '@/stores'\nimport { useHistory } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next';\nimport { ApiServerUrl } from '@/utils';\n\nexport const TableView = observer(() => {\n  const { overviewStore, logsStore, globalStore } = useStore();\n  const history = useHistory();\n  const {t} = useTranslation();\n  const getSpSum = (apps:object) => {\n    let sum:number = 0\n    Object.entries(apps).forEach((item)=>{\n      sum += item[1]\n    });\n    return sum\n  }\n  const view = (path:string) => {\n    history.push(path);\n  }\n  const showLogs = (id:string) => {\n    logsStore.setSpLogId(id);\n    history.push('logs/sessionpool')\n  }\n  const drainModeTxt = (sp: SessionPoolInfo) => {\n    return sp.drainMode ? t('overview.resume') : t('overview.drainMode')\n  }\n  \n  const resultsApps = !overviewStore.searchTerm\n    ? globalStore.paths\n    : globalStore.paths?.filter(item =>\n        item.name?.toLowerCase().includes(overviewStore.searchTerm.toLocaleLowerCase())||\n        item.path?.toLowerCase().includes(overviewStore.searchTerm.toLocaleLowerCase())\n    );\n  return (\n    <>\n    <Flex spacing={2}>\n      <ButtonIcon icon='filter_list' active={'sp' === overviewStore.orderBy} onClick={()=>overviewStore.setOrderBy('sp')}>{t('overview.bySPs')}</ButtonIcon>\n      <ButtonIcon icon='filter_list' active={'app' === overviewStore.orderBy} onClick={()=>overviewStore.setOrderBy('app')}>{t('overview.byapps')}</ButtonIcon>\n    </Flex>\n    <div className={cx(cssTab.wTabContent)}>\n      {\n        overviewStore.orderBy === 'sp' &&\n        <div className={css.table}>\n          <TableVirtualized \n            columns={[\n              {\n                dataKey:'id',\n                width: 35,\n                align: 'start',\n                label: '',\n                className: cssSessions.actionCell,\n                component: (id, sp) => <Dropdown\n                  className={cssSessions.actionCellDropdown}\n                  buttons={[\n                    {label: t('overview.verboseMode'), icon:'info', onClick: () => overviewStore.toggleVerbose(sp,'sp'), shouldShow: !sp.stopped},\n                    {label: t('routes.logs'), icon:'list_alt', onClick: () => showLogs(sp.id!)},\n                    {label: drainModeTxt(sp), icon:'opacity', onClick: () => overviewStore.toggleDrain(sp), shouldShow: !sp.stopped},\n                    {label: t('overview.stop'), icon:'power_settings_new', onClick: () => overviewStore.stop(sp.id!), shouldShow: !overviewStore.hasRunningInstances(sp.apps!) && !sp.stopped},\n                    {label: t('overview.shutdownSessions'), icon:'power_settings_new', onClick: () => overviewStore.shutdown(sp), shouldShow: overviewStore.hasRunningInstances(sp.apps!) && !sp.stopped}\n                  ]}\n                  >\n                    <Icon name={'more_vert'} />\n                  </Dropdown>\n              },\n              {\n                label: t('general.name'),\n                dataKey:'id',\n                minWidth: 200,\n                align: 'start',\n                bSort:true,\n              },\n              {\n                label:t('overview.appsRunning'),\n                dataKey:'apps',\n                minWidth: 100,\n                align: 'start',\n                component: (apps) => <span className={cssTable.wCell} style={{justifyContent:'start'}}>\n                    { apps? getSpSum(apps as any):null}\n                  </span>\n              },\n              {\n                label:t('overview.maxSessions'),\n                dataKey:'maxInstances',\n                minWidth: 100,\n                align: 'start',\n                component: (item) => <span className={cssTable.wCell} style={{justifyContent:'start'}}>{item == -1 ? 'Unlimited': item }</span>\n              },\n              {\n                label:t('overview.maxIdleSessions'),\n                dataKey:'maxIdleInstances',\n                minWidth: 100,\n                align: 'start',\n                component: (item) => <span className={cssTable.wCell} style={{justifyContent:'start'}}>{item == -1 ? 'Unlimited': item }</span>\n              },\n              {\n                label:t('overview.idleInstances'),\n                dataKey:'idle',\n                minWidth: 100,\n                align: 'start',\n                component: (item) => <span className={cssTable.wCell} style={{justifyContent:'start'}}>{item == -1 ? 'Unlimited': item }</span>\n              },\n              {\n                label:t('general.priority'),\n                dataKey:'priority',\n                minWidth: 100,\n                align: 'start',\n                bSort:true,\n              },\n              {\n                label:t('general.status'),\n                dataKey:'stopped',\n                minWidth: 100,\n                align: 'start',\n                component: (item) => \n                  item ? \n                  <Chip size='small' color='danger'>{t('overview.stopped')}</Chip>\n                  :\n                  <Chip size='small' color='success'>{t('overview.running')}</Chip>\n              },\n              {\n                label:t('routes.apps'),\n                dataKey:'apps',\n                minWidth: 100,\n                align: 'start',\n                component: (apps) => <AppsSPCell dialogHeader={t('overview.availableApps')} label={Object.entries(apps!).length + ' / ' + overviewStore.servers![0].apps!.length}>\n                  <table className={css.spTable}>\n                    <thead>\n                      <tr>\n                        <th>{t('sessions.app')}</th>\n                        <th>{t('status.running')}</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {apps ? Object.entries(apps).map((e) => {\n                        const path = globalStore.paths?.find((path)=>path.path === e[0])\n                        return (\n                          <tr key={e[0]}>\n                          <td>\n                          <Flex spacing={2}>\n                            <Avatar shape='square' src={ApiServerUrl +  e[0] + '/rest/appicon'} />\n                            <div>\n                              {path?.name}\n                              <small>{e[0]}</small>\n                            </div>\n                          </Flex>\n                          </td>\n                          <td>{e[1] as any}</td>\n                        </tr>\n                        )\n                      }):null}\n                    </tbody>\n                  </table>  \n                </AppsSPCell>\n              },\n            ] as IColumns<SessionPoolInfo>[]}\n            minTableWidth={650}\n            rowHeight={60}\n            threshold={500}\n            rowClassName={css.ac}\n            collection={overviewStore.filteredSPs}\n          />\n        </div>\n      }\n      {\n        overviewStore.orderBy === 'app' &&\n        <div className={css.table}>\n          <TableVirtualized \n              columns={[\n                {\n                  dataKey:'name',\n                  width: 35,\n                  align: 'start',\n                  label: '',\n                  className: cssSessions.actionCell,\n                  component: (name, row) => <Dropdown\n                    className={cssSessions.actionCellDropdown}\n                    buttons={[\n                      {label: t('general.config'), icon:'list_alt', onClick:()=>view('apps'+row.path)},\n                      {label: t('routes.sessions'), icon:'groups', onClick:()=>view('sessions'+row.path)},\n                    ]}\n                    >\n                      <Icon name={'more_vert'} />\n                    </Dropdown>\n                },\n                {\n                  label:t('overview.appName'),\n                  dataKey:'name',\n                  minWidth: 100,\n                  align: 'start',\n                  bSort:true,\n                },\n                {\n                  label:t('overview.path'),\n                  dataKey:'path',\n                  minWidth: 100,\n                  align: 'start',\n                  bSort:true,\n                },\n                {\n                  label:t('overview.running'),\n                  dataKey:'runningInstances',\n                  minWidth: 100,\n                  align: 'start',\n                  bSort:true,\n                },\n                {\n                  label:t('sessions.sp_plural'),\n                  dataKey:'path',\n                  minWidth: 100,\n                  align: 'start',\n                  component: (path, row) => <AppsSPCell dialogHeader={t('overview.sPsForApp')} label={overviewStore.appOnSP(row.path) + ' / ' + overviewStore.sessionPools!.length}>\n                  <table className={css.spTable}>\n                    <thead>\n                      <tr>\n                        <td>{t('sessions.sp')}</td>\n                        <td>{t('status.running')}</td>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {path ? overviewStore.sessionPools?.map((e) => (\n                        <tr key={e.id}>\n                          <td>{e.id}</td>\n                          <td>{e.apps![row.path!] as any}</td>\n                      </tr>\n                      )):null}\n                    </tbody>\n                  </table>  \n                </AppsSPCell>\n                },\n                {\n                  label:t('general.status'),\n                  dataKey:'status',\n                  minWidth: 100,\n                  align: 'start',\n                  component: (status) => <StatusBar status={status as InstanceManagerStatus[]} />\n                },\n              ] as IColumns<BasicApplicationInfo>[]}\n              minTableWidth={435}\n              rowHeight={60}\n              threshold={500}\n              rowClassName={css.ac}\n              collection={resultsApps}\n            />\n        </div>\n      }\n    </div>\n    </>\n  )\n})","import React from 'react';\nimport { AreaChart as Chart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport css from './ScalingCharts.module.scss'\nimport {useStore} from '@/stores';\nimport { observer } from 'mobx-react';\nimport { Flex, Heading } from '@/components';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '@/i18n';\n\nexport const ScalingCharts = observer(() => {\n    const {scalingStore} = useStore();\n    const {t} = useTranslation();\n    \n    const tooltipStyle = { \n        fontSize: \"12px\",\n        lineHeight: 'normal'\n    };\n\n    const dateOptions = {\n        hour12: true,\n        hour: 'numeric',\n        minute: '2-digit',\n    };\n\n    const timeTick = (value: any) => {\n        return value.toLocaleString('en-US', dateOptions); \n    };\n\n    const formatLabel = (value: any) => {\n        return (`${i18n.t('sessions.time')}: ${value.toLocaleString('en-US')}`);\n    };\n    \n    return (\n    <div className={css.root}>\n        <Flex itemsPerRow={2}>\n            <Flex bColumn className={css.lineChart}>\n                <Heading className={css.charsHeading} variant=\"h3\" title={t('scaling.utilization')} />\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <Chart\n                    syncId={\"scaling-chart\"}\n                    className={css.chart}\n                    data={scalingStore.getUtilizationStats.dataset}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                    }}\n                >\n                    <defs>\n                        <linearGradient id=\"colorTakenSlots\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#F5444A\" stopOpacity={0.8}/>\n                            <stop offset=\"95%\" stopColor=\"#F5444A\" stopOpacity={0}/>\n                        </linearGradient>\n                        <linearGradient id=\"colorFreeSlots\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                    <XAxis className={css.axisFont} dataKey=\"x\" tickFormatter={timeTick} minTickGap={30} />\n                    <YAxis className={css.axisFont} tickFormatter={scalingStore.getUtilizationStats.tickFormat} />\n                    <Tooltip\n                        wrapperStyle={tooltipStyle}\n                        labelFormatter={formatLabel}\n                        formatter={scalingStore.getUtilizationStats.tooltipFormatter}\n                    />\n                    <Area type=\"monotone\" dataKey=\"takenSlots\" stackId=\"1\" stroke=\"#F5444A\" fillOpacity={1} fill=\"url(#colorTakenSlots)\" />\n                    <Area type=\"monotone\" dataKey=\"freeSlots\" stackId=\"1\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorFreeSlots)\" />\n                </Chart>\n                </ResponsiveContainer>\n            </Flex>\n\n            <Flex bColumn className={css.lineChart}>\n                <Heading className={css.charsHeading} variant=\"h3\" title={t('scaling.status')} />\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <Chart\n                    syncId={\"scaling-chart\"}\n                    className={css.chart}\n                    data={scalingStore.getStatusStats.dataset}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                    }}>\n                    <defs>\n                        <linearGradient id=\"colorActiveSP\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\n                        </linearGradient>\n                        <linearGradient id=\"colorAutodrainedSP\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#ffc658\" stopOpacity={0.8}/>\n                            <stop offset=\"95%\" stopColor=\"#ffc658\" stopOpacity={0}/>\n                        </linearGradient>\n                        <linearGradient id=\"colorDrainedSP\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#F5444A\" stopOpacity={0.8}/>\n                            <stop offset=\"95%\" stopColor=\"#F5444A\" stopOpacity={0}/>\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                    <XAxis className={css.axisFont} dataKey=\"x\" tickFormatter={timeTick} minTickGap={30} />\n                    <YAxis className={css.axisFont} tickFormatter={scalingStore.getStatusStats.tickFormat} />\n                    <Tooltip\n                        wrapperStyle={tooltipStyle}\n                        labelFormatter={formatLabel}\n                        formatter={scalingStore.getStatusStats.tooltipFormatter}\n                    />\n                    <Area type=\"monotone\" dataKey=\"drainedSP\" stackId=\"1\" stroke=\"#F5444A\" fillOpacity={1} fill=\"url(#colorDrainedSP)\" />\n                    <Area type=\"monotone\" dataKey=\"autodrainedSP\" stackId=\"1\" stroke=\"#ffc658\" fillOpacity={1} fill=\"url(#colorAutodrainedSP)\" />\n                    <Area type=\"monotone\" dataKey=\"activeSP\" stackId=\"1\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorActiveSP)\" />\n                </Chart>\n                </ResponsiveContainer>\n            </Flex>\n        </Flex>\n    </div>\n    )\n})","// core\nimport React, { useEffect } from \"react\";\nimport cx from 'classnames'\n// services\nimport {useStore} from '@/stores';\n// components\nimport { PageHeader, NoData, Button, Flex, Grid, Icon, Switch } from '@/components';\nimport {ServerCard} from './partials/ServerCard'\nimport {SpCard} from './partials/SpCard'\n// utils\nimport { useInterval } from '@/utils'\n\n// translation\nimport cssTab from '@/components/containers/Tabs/Tabs.module.scss';\nimport cssButton from '@/components/basic/Button/variants/ButtonDefault/ButtonDefault.module.scss'\nimport { changeTitle } from '../routes';\nimport { observer } from \"mobx-react\";\nimport { TableView } from \"./partials/TableView\";\nimport { useLocation } from \"react-router-dom\";\nimport { Dropdown } from \"@/components/basic/Dropdown/Dropdown\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScalingCharts } from \"./partials/ScalingCharts\";\nimport { GetScalingStatsStatTypeEnum } from \"@/gen\";\n\nconst Overview = observer(() => {\n  changeTitle('Overview')\n  const { overviewStore, globalStore, scalingStore } = useStore()\n  const { pathname } = useLocation()\n  const { t } = useTranslation();\n  const isServers = pathname.includes('servers')\n  const isSessionpools = pathname.includes('sessionpools')\n  \n  useEffect(()=>{\n    overviewStore.loadOverview();\n    globalStore.loadPaths();\n    scalingStore.loadStats();\n  },[])\n  useInterval(() => {\n    overviewStore.loadOverview();\n    globalStore.loadPaths();\n    scalingStore.loadStats();\n  }, 5000);\n\n  return (\n    <div>\n      {\n        overviewStore.isCluster && scalingStore.isScalingEnabled() && \n        <>\n          <Switch value={scalingStore.statType == GetScalingStatsStatTypeEnum.Extended} size='medium' position=\"right\" onClick={() => scalingStore.toggleStatType()}>{t('scaling.statType.extended')}</Switch>\n          <ScalingCharts />\n        </>\n      }\n      { \n        !isSessionpools && \n        <>\n          <PageHeader title={overviewStore.isCluster? t('overview.clusters'): t('overview.server')} />\n          <Grid container spacing=\"sm\">\n            {\n            overviewStore.filteredServers?.length ? overviewStore.filteredServers?.map(item => (\n              <Grid key={item.id} item xs={12} md={6}>\n                <ServerCard server={item} />\n              </Grid>\n            )):\n            <NoData message={t('overview.noServers')} />\n            }\n          </Grid>\n        </>\n      }\n      {\n        (!isServers && overviewStore.isCluster) &&\n        <>\n          <Flex justifyContent={'space-between'} alignItems='center'>\n            <PageHeader title={t('sessions.sp_plural')} />\n            <Flex spacing={2}>\n              {overviewStore.anyStoppedSP && \n                <Switch value={overviewStore.showStopped} size='medium' position=\"right\" onClick={() => overviewStore.toggleShowStopped()}>{t('overview.showStopped')}</Switch>\n              }\n              <Button icon=\"apps\" color={'grid' === overviewStore.spView?'blue':'neutral'} onClick={() => overviewStore.setSpView('grid')} />\n              <Button icon=\"list\" color={'table' === overviewStore.spView?'blue':'neutral'} onClick={() => overviewStore.setSpView('table')} />\n              {overviewStore.sessionPools!.length>0 &&\n                <Dropdown\n                  position='right'\n                  buttons={\n                    [\n                      {label: t('overview.drainAll'), icon:'opacity', onClick:()=>overviewStore.drainAllSessionPools()},\n                      {label: t('overview.resumePools'), icon:'restore', onClick:()=>overviewStore.resumeAllSessionPools()},\n                      !overviewStore.hasRunningSessions ?\n                      {\n                        label: t('overview.stopAllPools'), \n                        icon:'power_settings_new', \n                        onClick:()=>overviewStore.stopAllSessionPools(),\n                      }:\n                      {\n                        label: t('overview.shutdownAllSessions'), \n                        icon:'power_settings_new', \n                        onClick:()=>overviewStore.shutdownAllSessions(), \n                        buttons:[{label: t('overview.forceKillAllSessions'), onClick:()=>overviewStore.forceKillAllSessions()}],\n                      }\n                    ]\n                  }\n                >\n                  <span className={cx(cssButton.wButtonDefault,cssButton.medium, cssButton.neutral, cssButton.icon)}>\n                    <Icon name={'more_vert'} />\n                  </span>\n                </Dropdown>\n              }\n            </Flex>\n          </Flex>\n          <div className={cx(cssTab.wTabContent)}>\n            {\n              overviewStore.spView === 'grid' &&\n              <Grid container spacing=\"sm\">\n                {overviewStore.filteredSPs?.length? overviewStore.filteredSPs?.map(pool => (\n                  <Grid key={pool.id} item xs={12} md={6}>\n                    <SpCard clusterservers={overviewStore.servers} sp={pool} />\n                  </Grid>\n\n                )):<NoData message={t('overview.noSps')} />}\n              </Grid>\n            }\n            {\n              overviewStore.spView === 'table' &&\n              <TableView />\n            }\n          </div>\n        </>\n      }\n    </div>\n  );\n});\n\nexport default Overview"],"names":["CounterSquare","count","title","tooltip","color","className","onClick","enabled","SquareContent","jsxs","cx","css","jsx","Tooltip","ServerCard","observer","server","countRunningStatus","countRunning","app","item","squareColor","running","_a","_b","getSpvsCluster","getSessionsCount","getSessionsCountCluster","logsStore","overviewStore","useStore","history","useHistory","t","i18n","useTranslation","openAppsDialog","setOpenAppsDialog","useState","openUsersDialog","setOpenUsersDialog","toggleAppsDialog","useCallback","toggleUsersDialog","showLogs","id","Card","CardContent","Flex","Heading","Dropdown","cssButton","Icon","Chip","Dialog","e","Avatar","ApiServerUrl","Status","user","SpPie","width","height","apps","allZero","setAllZero","getSpApps","getSpSum","sum","useEffect","COLORS","PieChart","Pie","Label","entry","index","Cell","AppsSPCell","label","dialogHeader","children","open","setOpen","toggle","state","Fragment","cssTable","SpCard","sp","clusterservers","appsToggleOpen","setAppsToggleOpen","globalStore","path","drainModeTxt","TableView","view","resultsApps","ButtonIcon","cssTab","TableVirtualized","cssSessions","name","row","status","StatusBar","ScalingCharts","scalingStore","tooltipStyle","dateOptions","timeTick","value","formatLabel","ResponsiveContainer","Chart","CartesianGrid","XAxis","YAxis","Area","Overview","changeTitle","pathname","useLocation","isServers","isSessionpools","useInterval","Switch","GetScalingStatsStatTypeEnum","PageHeader","Grid","NoData","Button","_c","_d","pool"],"mappings":"i1BAkBaA,EAAgB,CAAC,CAC5B,MAAAC,EACA,MAAAC,EACA,QAAAC,EACA,MAAAC,EAAM,UACN,UAAAC,EACA,QAAAC,EACA,QAAAC,CACF,IAA2B,CAEzB,MAAMC,EAAgB,IAElBC,EAAA,KAAC,MAAA,CAAI,QAAAH,EAAkB,UAAWI,EAChCC,EAAI,KACJN,EACA,CAAC,CAACM,EAAI,MAAM,EAAEL,CAAO,EACrB,CAAC,CAACK,EAAIP,CAAK,CAAC,EAAGG,GAAY,OAAON,GAAS,UAAYA,CAAM,CAC/D,EAEE,SAAA,CAAAW,EAAAA,IAAC,MAAI,SAAMX,CAAA,CAAA,EACXW,EAAAA,IAAC,SAAO,SAAMV,CAAA,CAAA,CAAA,CAAA,CAAA,EAKpB,OACIC,EACES,EAAA,IAACC,GAAQ,CAAA,QAASV,EAChB,SAAAS,EAAA,IAAC,OACC,CAAA,SAAAA,MAACJ,EAAc,CAAA,CAAA,CACjB,CAAA,CACF,CAAA,QAEDA,EAAc,CAAA,CAAA,CAErB,EC5BaM,GAAaC,EAAS,CAAC,CAClC,OAAAC,CACF,IAAwB,OAEtB,MAAMC,EAAqB,IAAM,CAC/B,IAAIC,EAAuB,EAC3B,GAAGF,EAAO,KACG,UAAAG,KAAOH,EAAO,KACZ,UAAAI,KAAQD,EAAI,OAClBC,EAAK,SAAW,WACjBF,IAKD,OAAAA,CAAA,EAGHG,EAAc,IAAM,SACxB,MAAMC,EAAUL,IACP,OAAAK,MAAYC,EAAAP,EAAO,OAAP,YAAAO,EAAa,QAAU,UAC1CD,IAAY,GAAKA,MAAYE,EAAAR,EAAO,OAAP,YAAAQ,EAAa,QAAS,SACnD,SAAA,EAEEC,EAAiB,IAAM,OAC3B,OAAOR,EAAmB,EAAI,QAAQM,EAAAP,EAAO,OAAP,YAAAO,EAAa,OAAA,EAE/CG,EAAmB,IAChBV,EAAO,mBAAqB,MAAQA,EAAO,KAAO,MAAQA,EAAO,UAEpEW,EAA0B,IACvBX,EAAO,mBAAqB,MAAQA,EAAO,UAE9C,CAAC,UAAAY,EAAW,cAAAC,CAAa,EAAIC,EAAS,EACtCC,EAAUC,IACV,CAAE,EAAAC,EAAG,KAAAC,CAAK,EAAIC,EAAe,EAE7B,CAACC,EAAgBC,CAAiB,EAAIC,WAAS,EAAK,EACpD,CAACC,EAAiBC,CAAkB,EAAIF,WAAS,EAAK,EACtDG,EAAmBC,EAAAA,YAAY,IAAM,CACzCL,EAAkB,CAACD,CAAc,CAAA,EAChC,CAACA,CAAc,CAAC,EACbO,EAAoBD,EAAAA,YAAY,IAAM,CAC1CF,EAAmB,CAACD,CAAe,CAAA,EAClC,CAACA,CAAe,CAAC,EAEdK,EAAWF,cAAaG,GAAO,CACnCjB,EAAU,eAAeiB,CAAE,EAC3Bd,EAAQ,KAAK,aAAa,CAAA,EACzB,CAACA,CAAO,CAAC,EAGZ,aACGe,GAAK,CAAA,UAAWnC,EAAI,WACnB,gBAACoC,GACC,CAAA,SAAA,CAACtC,EAAAA,KAAAuC,EAAA,CAAK,eAAe,gBACnB,SAAA,CAAApC,EAAA,IAACqC,EAAA,CACC,QAAS,KACT,QAAS,CAAE,QAAStC,EAAI,WAAY,EACpC,MAAOK,EAAO,QAAUA,EAAO,GAAM,iBAAA,CACvC,EACAJ,EAAA,IAACsC,EAAA,CACC,SAAS,QACT,QAAS,CACP,CAAC,MAAOjB,EAAE,sBAAsB,EAAG,KAAK,OAAQ,QAAQ,IAAIJ,EAAc,cAAcb,EAAO,QAAQ,CAAC,EACxG,CAAC,MAAOiB,EAAE,aAAa,EAAG,KAAK,WAAY,QAAQ,IAAIW,EAAS5B,EAAO,EAAG,CAAC,CAC7E,EAEE,eAAC,OAAK,CAAA,UAAWN,EAAGyC,EAAU,eAAeA,EAAU,OAAQA,EAAU,QAASA,EAAU,IAAI,EAC9F,eAACC,EAAK,CAAA,KAAM,WAAa,CAAA,EAC3B,CAAA,CACF,CAAA,EACJ,QACC,OAAK,CAAA,UAAWzC,EAAI,UAAY,WAAO,aAAa,EACrDC,EAAAA,IAACoC,GAAK,QAAS,EAAG,UAAWtC,EAAGC,EAAI,OAAQ,CAAC,CAACA,EAAI,SAAS,EAAEkB,EAAc,uBAAwB,CAAA,EAE/F,WAAO,gBACPpB,EAAA,KAAC4C,EAAK,CAAA,KAAK,QACT,SAAA,CAAAzC,EAAA,IAACwC,EAAK,CAAA,KAAK,uBAAuB,KAAK,OAAO,EAAE,IAAEnB,EAAE,sBAAsB,CAAA,CAAA,CAC5E,CAEJ,CAAA,EACCxB,EAAA,KAAAuC,EAAA,CAAK,QAAS,EAAG,SAAU,OAC1B,SAAA,CAACpC,EAAAA,IAAAZ,EAAA,CAAc,MAAOiC,EAAE,oBAAoB,EAAG,OAAOV,EAAAP,EAAO,eAAP,YAAAO,EAAqB,OAAQ,MAAO,YAAc,CAAA,QACvGvB,EAAc,CAAA,MAAOiC,EAAE,gBAAgB,EAAG,MAAOjB,EAAO,MAAO,MAAO,WAAY,QAASuB,EAAgB,GAAGN,EAAE,wBAAwB,EAAG,QAASU,EAAmB,EACtK3B,EAAO,SAAYJ,EAAA,IAAAZ,EAAA,CAAc,MAAOiC,EAAE,mBAAmB,EAAG,MAAON,EAAA,EAA2B,MAAO,OAAQ,QAASX,EAAQ,UAAa,EAAG,QAASiB,EAAE,kCAAkC,EAAG,EAClM,CAACjB,EAAO,SAAYJ,EAAA,IAAAZ,EAAA,CAAc,MAAOiC,EAAE,mBAAmB,EAAG,MAAOP,EAAiB,EAAG,MAAO,OAAQ,QAASV,EAAQ,UAAa,GAAKA,EAAQ,KAAQ,EAAG,QAASiB,EAAE,2BAA2B,CAAG,CAAA,EAC3MrB,EAAA,IAAAZ,EAAA,CAAc,MAAOiC,EAAE,sBAAsB,EAAG,MAAOjB,EAAO,YAAa,MAAO,YAAa,QAASiB,EAAE,8BAA8B,EAAG,EAC3IrB,EAAA,IAAAZ,EAAA,CAAc,MAAOiC,EAAE,sBAAsB,EAAG,MAAOR,EAAe,EAAG,MAAOJ,EAAY,EAAG,QAAS,GAAM,QAASoB,EAAkB,EAC1I7B,EAAA,IAAC0C,EAAA,CACC,MAAOlB,EACP,MAAOH,EAAE,wBAAwB,EACjC,SAAUQ,EACV,OAAQ,GAER,eAAC,MAAI,CAAA,UAAW9B,EAAI,QAClB,gBAAC,QACC,CAAA,SAAA,CAACC,EAAA,IAAA,QAAA,CACC,gBAAC,KACC,CAAA,SAAA,CAACA,EAAA,IAAA,KAAA,CAAI,SAAEqB,EAAA,aAAa,CAAE,CAAA,EACrBrB,EAAA,IAAA,KAAA,CAAI,SAAEqB,EAAA,gBAAgB,CAAE,CAAA,CAAA,CAAA,CAC3B,CACF,CAAA,EACArB,EAAAA,IAAC,SAEG,SAAOI,EAAA,KAAM,IAAKuC,UACf,KACC,CAAA,SAAA,CAAA3C,MAAC,KACC,CAAA,SAAAH,EAAAA,KAACuC,EAAK,CAAA,QAAS,EACb,SAAA,CAAApC,MAAC4C,GAAO,MAAM,SAAS,IAAKC,EAAgBF,EAAE,KAAO,gBAAiB,SACrE,MACE,CAAA,SAAA,CAAEA,EAAA,KAAK3C,EAAAA,IAAC,QAAO,CAAA,SAAA2C,EAAE,IAAK,CAAA,CAAA,EACzB,CAAA,CAAA,CACF,CACF,CAAA,EACA3C,EAAAA,IAAC,KAAG,CAAA,SAAAA,EAAAA,IAAC8C,GAAO,CAAA,MAAOH,EAAE,OAAQ,CAAC,EAAE,MAAA,CAAS,CAAE,CAAA,CATpC,CAAA,EAAAA,EAAE,IAUX,CACD,EAEL,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CACF,EACA3C,EAAA,IAAC0C,EAAA,CACC,MAAOf,EACP,MAAON,EAAE,gBAAgB,EACzB,SAAUU,EACV,OAAQ,GAER,SAAA/B,EAAA,IAAC,OAAI,UAAWD,EAAI,cAClB,SAACC,EAAAA,IAAA,QAAA,CACC,gBAAC,QACE,CAAA,SAAA,CAAAI,EAAO,UACNA,EAAO,SAAU,IAAK2C,GACnB/C,EAAAA,IAAA,KAAA,CACC,SAACA,EAAAA,IAAA,KAAA,CAAI,SAAK+C,EAAA,CAAA,EADHA,CAET,CACD,EAEF,CAAC3C,EAAO,UACNJ,EAAA,IAAA,KAAA,CACC,eAAC,KAAI,CAAA,SAAAqB,EAAE,sBAAsB,CAAA,CAAE,CACjC,CAAA,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,CAAA,CACF,CAAA,EACF,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,CAAC,EC1JY2B,GAAQ,CAAC,CACpB,UAAAvD,EACA,MAAAwD,EACA,OAAAC,EACA,QAAAxD,EACA,KAAAyD,CACF,IAAwB,CACtB,KAAM,CAACC,EAASC,CAAU,EAAI3B,WAAS,EAAI,EACrC,CAAC,EAAAL,GAAKE,IAEN+B,EAAY,IACT,OAAO,QAAQH,CAAK,EAAE,IAAKR,IAAQ,CAAE,KAAKA,EAAE,CAAC,EAAG,MAAMA,EAAE,CAAC,CAAK,EAAA,EAEjEY,EAAW,IAAM,CACrB,IAAIC,EAAa,EACjB,cAAO,QAAQL,CAAK,EAAE,QAAS3C,GAAO,CACpCgD,GAAOhD,EAAK,CAAC,CAAA,CACd,EACMgD,CAAA,EAGTC,EAAAA,UAAU,IAAK,CACFJ,EAAA,CAAAE,EAAA,CAAqB,CAAA,EAChC,CAACJ,CAAI,CAAC,EAER,MAAMO,EAAS,CAAC,UAAW,UAAW,UAAW,SAAS,EAC1D,yBAGM,SAAC7D,EAAAA,KAAA8D,GAAA,CAAS,QAAAjE,EAAkB,UAAAD,EAAsB,MAAAwD,EAAc,OAAAC,EAC9D,SAAA,CAAArD,EAAA,KAAC+D,GAAA,CACC,KAAMR,EAAQ,CAAC,CAAC,KAAK,KAAK,MAAM,EAAE,EAAEE,EAAU,EAC9C,YAAa,GACb,YAAa,GACb,KAAK,UACL,aAAc,EACd,QAAQ,QAER,SAAA,CAAAtD,EAAA,IAAC6D,EAAA,CACD,MAAON,EAAS,EAAG,SAAS,eAAgB,UAAWxD,EAAI,aAAc,SAAS,MAAA,CAClF,EACAC,EAAA,IAAC6D,EAAA,CACD,MAAOxC,EAAE,kBAAkB,EAAa,SAAS,YAAY,UAAWtB,EAAI,eAAA,CAC5E,EACCuD,EAAY,EAAA,IAAI,CAACQ,EAAOC,UACtBC,GAA2B,CAAA,KAAMZ,EAAS,UAAUM,EAAOK,EAAQL,EAAO,MAAM,CAAtE,EAAA,QAAQK,GAAiE,CACrF,CAAA,CAAA,CACH,EACC,CAACX,GAAWpD,EAAAA,IAACC,EAAQ,EAAA,CAAA,CACxB,CAAA,CAEJ,CAAA,CAEJ,EC1DagE,EAAa9D,EAAS,CAAC,CAAC,UAAAV,EAAW,QAAAC,EAAS,MAAAwE,EAAM,aAAAC,EAAc,SAAAC,KAA8B,CACzG,KAAM,CAACC,EAAMC,CAAO,EAAI5C,WAAS,EAAK,EAChC6C,EAASzC,cAAa0C,GAAoB,CAC1CH,IAASG,GACHF,EAAAE,GAAgB,CAACH,CAAI,CAC/B,EACC,CAACA,CAAI,CAAC,EACT,OAEIxE,EAAA,KAAA4E,WAAA,CAAA,SAAA,CAAAzE,MAAC,QAAK,QAAS,IAAIsE,EAAQ,CAACD,CAAI,EAAG,UAAWvE,EAAG4E,EAAS,MAAO3E,EAAI,IAAI,EAAG,MAAO,CAAC,eAAe,SAChG,SACHmE,EAAA,EACAlE,EAAA,IAAC0C,EAAA,CACC,MAAO2B,EACP,MAAOF,EACP,SAAUI,EACV,OAAQ,GAEP,SAAAH,CAAA,CACH,CACF,CAAA,CAAA,CAEJ,CAAC,ECdYO,GAAS,CAAC,CACrB,UAAAlF,EACA,QAAAC,EACA,GAAAkF,EACA,eAAAC,EAAe,CAAC,CAClB,IAAwB,CACtB,KAAM,CAACC,EAAgBC,CAAiB,EAAIrD,WAAS,EAAK,EACpD,CAAC,UAAAV,EAAW,cAAAC,EAAe,YAAA+D,GAAe9D,EAAS,EACnDC,EAAUC,IACV,CAAC,EAAAC,GAAKE,IACN+B,EAAY,IACT,OAAO,QAAQsB,EAAG,IAAK,EAAE,IAAKjC,GAAM,OACnC,MAAAsC,GAAOtE,EAAAqE,EAAY,QAAZ,YAAArE,EAAmB,KAAMsE,GAAOA,EAAK,OAAStC,EAAE,CAAC,GACvD,MAAA,CAAE,KAAKsC,GAAA,YAAAA,EAAM,KAAM,KAAKtC,EAAE,CAAC,EAAG,MAAMA,EAAE,CAAC,CAAE,CAAA,CACjD,EAGG9B,EAAiB,IAAM,OAE3B,OADe,OAAO,QAAQ+D,EAAG,IAAK,EACxB,OAAS,QAAQjE,EAAAkE,EAAe,CAAC,EAAE,OAAlB,YAAAlE,EAAwB,OAAA,EAEnDqB,EAAWF,cAAaG,GAAO,CACnCjB,EAAU,WAAWiB,CAAE,EACvBd,EAAQ,KAAK,kBAAkB,CAAA,EAC9B,CAACA,CAAO,CAAC,EAEN+D,EAAe,IACZN,EAAG,UAAYvD,EAAE,iBAAiB,EAAIA,EAAE,oBAAoB,EAInE,OAAArB,EAAA,IAACkC,GAAK,CAAA,QAAAxC,EAAkB,UAAWI,EAAGC,EAAI,OAAQN,CAAS,EAC3D,SAAAI,EAAA,KAACsC,GACK,CAAA,SAAA,CAACtC,EAAAA,KAAAuC,EAAA,CAAK,eAAe,gBACnB,SAAA,CAAApC,EAAA,IAACqC,EAAA,CACC,QAAS,KACT,QAAS,CAAE,QAAStC,EAAI,WAAY,EACpC,MAAO6E,EAAG,EAAA,CACZ,EACC,CAACA,EAAG,SACH5E,EAAA,IAACsC,EAAA,CACC,SAAS,QACT,QAAS,CACP,CAAC,MAAOjB,EAAE,sBAAsB,EAAG,KAAK,OAAQ,QAAS,IAAMJ,EAAc,cAAc2D,EAAG,IAAI,CAAC,EACnG,CAAC,MAAOvD,EAAE,aAAa,EAAG,KAAK,WAAY,QAAS,IAAMW,EAAS4C,EAAG,EAAG,CAAC,EAC1E,CAAC,MAAOM,EAAgB,EAAA,KAAK,UAAW,QAAS,IAAMjE,EAAc,YAAY2D,CAAE,CAAC,EACpF,CAAC,MAAOvD,EAAE,eAAe,EAAG,KAAK,qBAAsB,QAAS,IAAMJ,EAAc,KAAK2D,EAAG,EAAG,EAAG,WAAY,CAAC3D,EAAc,oBAAoB2D,EAAG,IAAK,CAAC,EAC1J,CAAC,MAAOvD,EAAE,2BAA2B,EAAG,KAAK,qBAAsB,QAAS,IAAMJ,EAAc,SAAS2D,CAAE,EAAG,WAAY3D,EAAc,oBAAoB2D,EAAG,IAAK,CAAC,CAEvK,EAEE,eAAC,OAAK,CAAA,UAAW9E,EAAGyC,EAAU,eAAeA,EAAU,OAAQA,EAAU,QAASA,EAAU,IAAI,EAC9F,eAACC,EAAK,CAAA,KAAM,WAAa,CAAA,EAC3B,CAAA,CACJ,CAAA,EAEJ,SACCJ,EAAK,CAAA,QAAS,EAAG,UAAWtC,EAAGC,EAAI,OAAQ,CAAC,CAACA,EAAI,SAAS,EAAEkB,EAAc,mBAAA,CAAoB,EAE3F,SAAA,CAAA2D,EAAG,QACF5E,MAAAyC,EAAA,CAAK,KAAK,QAAQ,MAAM,SAAW,SAAEpB,EAAA,kBAAkB,EAAE,EAE1DrB,MAACyC,GAAK,KAAK,QAAQ,MAAM,UAAY,SAAApB,EAAE,kBAAkB,CAAE,CAAA,EAG3DuD,EAAG,UAAa5E,EAAAA,IAAAyC,EAAA,CAAK,KAAK,QAAQ,QAASpB,EAAE,2BAA2B,EAAI,SAAEA,EAAA,mBAAmB,CAAE,CAAA,EAGnG,CAACuD,EAAG,SAAWA,EAAG,kBAAcnC,EAAK,CAAA,KAAK,QAAQ,MAAM,UAAW,SAAA,CAAAzC,EAAA,IAACwC,EAAK,CAAA,KAAK,UAAU,KAAK,OAAO,EAAE,IAAGoC,EAAG,cAAgBvD,EAAE,wBAAwB,EAAIA,EAAE,oBAAoB,CAAA,EAAE,EAGlLuD,EAAG,gBACF/E,OAAA4C,EAAA,CAAK,KAAK,QAAQ,SAAA,CAAAzC,EAAA,IAACwC,EAAK,CAAA,KAAK,uBAAuB,KAAK,OAAO,EAAE,IAAEnB,EAAE,sBAAsB,CAAA,EAAE,CAAA,EAEnG,EACCxB,EAAA,KAAAuC,EAAA,CAAK,QAAS,EAAG,SAAU,OAC1B,SAAA,CAAApC,EAAA,IAACoC,EAAK,CAAA,KAAM,EACV,SAAApC,EAAA,IAACgD,GAAM,CAAA,KAAM4B,EAAG,KAAM,MAAO,IAAK,OAAQ,GAAK,CAAA,EACjD,EACA5E,EAAA,IAACoC,EAAK,CAAA,KAAM,EACV,SAAApC,EAAAA,IAAC,SAAM,UAAWD,EAAI,QACpB,SAAAF,EAAAA,KAAC,QACC,CAAA,SAAA,CAAAA,OAAC,KACC,CAAA,SAAA,CAACG,EAAA,IAAA,KAAA,CAAG,gBAAC,SAAQ,CAAA,SAAA,CAAAqB,EAAE,sBAAsB,EAAE,GAAA,CAAA,CAAC,CAAS,CAAA,EACjDrB,EAAAA,IAAC,MAAI,SAAG4E,EAAA,cAAgB,GAAKvD,EAAE,oBAAoB,EAAGuD,EAAG,YAAc,CAAA,CAAA,EACzE,SACC,KACC,CAAA,SAAA,CAAC5E,EAAA,IAAA,KAAA,CAAG,gBAAC,SAAQ,CAAA,SAAA,CAAAqB,EAAE,0BAA0B,EAAE,GAAA,CAAA,CAAC,CAAS,CAAA,EACrDrB,EAAAA,IAAC,MAAI,SAAG4E,EAAA,kBAAoB,GAAKvD,EAAE,oBAAoB,EAAGuD,EAAG,gBAAkB,CAAA,CAAA,EACjF,SACC,KACC,CAAA,SAAA,CAAC5E,EAAA,IAAA,KAAA,CAAG,gBAAC,SAAQ,CAAA,SAAA,CAAAqB,EAAE,wBAAwB,EAAE,GAAA,CAAA,CAAC,CAAS,CAAA,EACnDrB,EAAAA,IAAC,KAAI,CAAA,SAAA4E,EAAG,IAAK,CAAA,CAAA,EACf,SACC,KACC,CAAA,SAAA,CAAC5E,EAAA,IAAA,KAAA,CAAG,gBAAC,SAAQ,CAAA,SAAA,CAAAqB,EAAE,kBAAkB,EAAE,GAAA,CAAA,CAAC,CAAS,CAAA,EAC7CrB,EAAAA,IAAC,KAAI,CAAA,SAAA4E,EAAG,QAAS,CAAA,CAAA,EACnB,SACC,KAAG,CAAA,QAAS,IAAIG,EAAkB,CAACD,CAAc,EAChD,SAAA,CAAC9E,EAAA,IAAA,KAAA,CAAG,gBAAC,SAAQ,CAAA,SAAA,CAAAqB,EAAE,aAAa,EAAE,GAAA,CAAA,CAAC,CAAS,CAAA,EACvCrB,MAAA,KAAA,CAEG,SAACA,EAAAA,IAAAiE,EAAA,CAAW,aAAc5C,EAAE,6BAA6B,EAAG,MAAOR,EACjE,EAAA,SAAAhB,OAAC,QAAM,CAAA,UAAWE,EAAI,QACpB,SAAA,CAACC,EAAA,IAAA,QAAA,CACC,gBAAC,KACC,CAAA,SAAA,CAACA,EAAA,IAAA,KAAA,CAAI,SAAEqB,EAAA,aAAa,CAAE,CAAA,EACrBrB,EAAA,IAAA,KAAA,CAAI,SAAEqB,EAAA,kBAAkB,CAAE,CAAA,CAAA,CAAA,CAC7B,CACF,CAAA,EACArB,EAAAA,IAAC,QACE,CAAA,SAAA8E,GAAkBxB,EAAU,EAAE,IAAI,CAACQ,EAAOC,IACzClE,EAAA,KAAC,KACC,CAAA,SAAA,CAAAG,MAAC,KACD,CAAA,SAAAH,EAAAA,KAACuC,EAAK,CAAA,QAAS,EACb,SAAA,CAAApC,MAAC4C,GAAO,MAAM,SAAS,IAAKC,EAAgBiB,EAAM,KAAO,gBAAiB,SACzE,MACE,CAAA,SAAA,CAAMA,EAAA,KACP9D,EAAAA,IAAC,QAAO,CAAA,SAAA8D,EAAM,IAAK,CAAA,CAAA,EACrB,CAAA,CAAA,CACF,CACA,CAAA,EACA9D,EAAAA,IAAC,KAAI,CAAA,SAAA8D,EAAM,KAAM,CAAA,CAVV,CAAA,EAAAA,EAAM,IAWf,CACD,EACH,CAAA,CACF,CAAA,CACF,CAAA,EAEF,CAAA,EACJ,CAAA,CACF,CAAA,CACF,CAAA,EACF,CAAA,EACF,CAAA,CACN,CAAA,CACF,CAAA,CAEF,EChJaqB,GAAYhF,EAAS,IAAM,OACtC,KAAM,CAAE,cAAAc,EAAe,UAAAD,EAAW,YAAAgE,GAAgB9D,EAAS,EACrDC,EAAUC,IACV,CAAC,GAAKG,IACNgC,EAAYJ,GAAgB,CAChC,IAAIK,EAAa,EACjB,cAAO,QAAQL,CAAI,EAAE,QAAS3C,GAAO,CACnCgD,GAAOhD,EAAK,CAAC,CAAA,CACd,EACMgD,CAAA,EAEH4B,EAAQH,GAAgB,CAC5B9D,EAAQ,KAAK8D,CAAI,CAAA,EAEbjD,EAAYC,GAAc,CAC9BjB,EAAU,WAAWiB,CAAE,EACvBd,EAAQ,KAAK,kBAAkB,CAAA,EAE3B+D,EAAgBN,GACbA,EAAG,UAAY,EAAE,iBAAiB,EAAI,EAAE,oBAAoB,EAG/DS,EAAepE,EAAc,YAE/BN,EAAAqE,EAAY,QAAZ,YAAArE,EAAmB,UACjB,SAAA,QAAAA,EAAAH,EAAK,OAAL,YAAAG,EAAW,cAAc,SAASM,EAAc,WAAW,kBAAmB,OAC9EL,EAAAJ,EAAK,OAAL,YAAAI,EAAW,cAAc,SAASK,EAAc,WAAW,wBAH7D+D,EAAY,MAKhB,OAEEnF,EAAA,KAAA4E,WAAA,CAAA,SAAA,CAAC5E,EAAAA,KAAAuC,EAAA,CAAK,QAAS,EACb,SAAA,CAAApC,EAAA,IAACsF,GAAW,CAAA,KAAK,cAAc,OAAiBrE,EAAc,UAAvB,KAAgC,QAAS,IAAIA,EAAc,WAAW,IAAI,EAAI,SAAA,EAAE,gBAAgB,EAAE,QACxIqE,GAAW,CAAA,KAAK,cAAc,OAAkBrE,EAAc,UAAxB,MAAiC,QAAS,IAAIA,EAAc,WAAW,KAAK,EAAI,SAAA,EAAE,iBAAiB,EAAE,CAAA,EAC9I,SACC,MAAI,CAAA,UAAWnB,EAAGyF,GAAO,WAAW,EAEjC,SAAA,CAAAtE,EAAc,UAAY,MAC1BjB,MAAC,MAAI,CAAA,UAAWD,EAAI,MAClB,SAAAC,EAAA,IAACwF,GAAA,CACC,QAAS,CACP,CACE,QAAQ,KACR,MAAO,GACP,MAAO,QACP,MAAO,GACP,UAAWC,EAAY,WACvB,UAAW,CAACxD,EAAI2C,IAAO5E,EAAA,IAACsC,EAAA,CACtB,UAAWmD,EAAY,mBACvB,QAAS,CACP,CAAC,MAAO,EAAE,sBAAsB,EAAG,KAAK,OAAQ,QAAS,IAAMxE,EAAc,cAAc2D,EAAG,IAAI,EAAG,WAAY,CAACA,EAAG,OAAO,EAC5H,CAAC,MAAO,EAAE,aAAa,EAAG,KAAK,WAAY,QAAS,IAAM5C,EAAS4C,EAAG,EAAG,CAAC,EAC1E,CAAC,MAAOM,EAAaN,CAAE,EAAG,KAAK,UAAW,QAAS,IAAM3D,EAAc,YAAY2D,CAAE,EAAG,WAAY,CAACA,EAAG,OAAO,EAC/G,CAAC,MAAO,EAAE,eAAe,EAAG,KAAK,qBAAsB,QAAS,IAAM3D,EAAc,KAAK2D,EAAG,EAAG,EAAG,WAAY,CAAC3D,EAAc,oBAAoB2D,EAAG,IAAK,GAAK,CAACA,EAAG,OAAO,EACzK,CAAC,MAAO,EAAE,2BAA2B,EAAG,KAAK,qBAAsB,QAAS,IAAM3D,EAAc,SAAS2D,CAAE,EAAG,WAAY3D,EAAc,oBAAoB2D,EAAG,IAAK,GAAK,CAACA,EAAG,OAAO,CACtL,EAEE,SAAA5E,EAAAA,IAACwC,EAAK,CAAA,KAAM,WAAa,CAAA,CAAA,CAC3B,CACJ,EACA,CACE,MAAO,EAAE,cAAc,EACvB,QAAQ,KACR,SAAU,IACV,MAAO,QACP,MAAM,EACR,EACA,CACE,MAAM,EAAE,sBAAsB,EAC9B,QAAQ,OACR,SAAU,IACV,MAAO,QACP,UAAYW,GAAUnD,EAAA,IAAA,OAAA,CAAK,UAAW0E,EAAS,MAAO,MAAO,CAAC,eAAe,OAAO,EAC9E,WAAMnB,EAASJ,CAAW,EAAE,KAChC,CACJ,EACA,CACE,MAAM,EAAE,sBAAsB,EAC9B,QAAQ,eACR,SAAU,IACV,MAAO,QACP,UAAY3C,GAAUR,EAAA,IAAA,OAAA,CAAK,UAAW0E,EAAS,MAAO,MAAO,CAAC,eAAe,OAAO,EAAI,SAAQlE,GAAA,GAAK,YAAaA,EAAM,CAC1H,EACA,CACE,MAAM,EAAE,0BAA0B,EAClC,QAAQ,mBACR,SAAU,IACV,MAAO,QACP,UAAYA,GAAUR,EAAA,IAAA,OAAA,CAAK,UAAW0E,EAAS,MAAO,MAAO,CAAC,eAAe,OAAO,EAAI,SAAQlE,GAAA,GAAK,YAAaA,EAAM,CAC1H,EACA,CACE,MAAM,EAAE,wBAAwB,EAChC,QAAQ,OACR,SAAU,IACV,MAAO,QACP,UAAYA,GAAUR,EAAA,IAAA,OAAA,CAAK,UAAW0E,EAAS,MAAO,MAAO,CAAC,eAAe,OAAO,EAAI,SAAQlE,GAAA,GAAK,YAAaA,EAAM,CAC1H,EACA,CACE,MAAM,EAAE,kBAAkB,EAC1B,QAAQ,WACR,SAAU,IACV,MAAO,QACP,MAAM,EACR,EACA,CACE,MAAM,EAAE,gBAAgB,EACxB,QAAQ,UACR,SAAU,IACV,MAAO,QACP,UAAYA,GACVA,QACCiC,EAAK,CAAA,KAAK,QAAQ,MAAM,SAAU,SAAA,EAAE,kBAAkB,CAAE,CAAA,QAExDA,EAAK,CAAA,KAAK,QAAQ,MAAM,UAAW,SAAE,EAAA,kBAAkB,CAAE,CAAA,CAC9D,EACA,CACE,MAAM,EAAE,aAAa,EACrB,QAAQ,OACR,SAAU,IACV,MAAO,QACP,UAAYU,GAAUnD,MAAAiE,EAAA,CAAW,aAAc,EAAE,wBAAwB,EAAG,MAAO,OAAO,QAAQd,CAAK,EAAE,OAAS,MAAQlC,EAAc,QAAS,CAAC,EAAE,KAAM,OACxJ,SAACpB,EAAA,KAAA,QAAA,CAAM,UAAWE,EAAI,QACpB,SAAA,CAACC,EAAA,IAAA,QAAA,CACC,gBAAC,KACC,CAAA,SAAA,CAACA,EAAA,IAAA,KAAA,CAAI,SAAE,EAAA,cAAc,CAAE,CAAA,EACtBA,EAAA,IAAA,KAAA,CAAI,SAAE,EAAA,gBAAgB,CAAE,CAAA,CAAA,CAAA,CAC3B,CACF,CAAA,EACAA,EAAAA,IAAC,SACE,SAAOmD,EAAA,OAAO,QAAQA,CAAI,EAAE,IAAKR,GAAM,OAChC,MAAAsC,GAAOtE,EAAAqE,EAAY,QAAZ,YAAArE,EAAmB,KAAMsE,GAAOA,EAAK,OAAStC,EAAE,CAAC,GAC9D,cACG,KACD,CAAA,SAAA,CAAA3C,MAAC,KACD,CAAA,SAAAH,EAAAA,KAACuC,EAAK,CAAA,QAAS,EACb,SAAA,CAACpC,EAAAA,IAAA4C,EAAA,CAAO,MAAM,SAAS,IAAKC,EAAgBF,EAAE,CAAC,EAAI,gBAAiB,SACnE,MACE,CAAA,SAAA,CAAMsC,GAAA,YAAAA,EAAA,KACNjF,EAAA,IAAA,QAAA,CAAO,SAAE2C,EAAA,CAAC,CAAE,CAAA,CAAA,EACf,CAAA,CAAA,CACF,CACA,CAAA,EACC3C,EAAA,IAAA,KAAA,CAAI,SAAE2C,EAAA,CAAC,CAAS,CAAA,CAAA,GAVRA,EAAE,CAAC,CAWd,CAAA,CAED,EAAE,IACL,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CACF,CACF,EACA,cAAe,IACf,UAAW,GACX,UAAW,IACX,aAAc5C,EAAI,GAClB,WAAYkB,EAAc,WAAA,CAAA,EAE9B,EAGAA,EAAc,UAAY,aACzB,MAAI,CAAA,UAAWlB,EAAI,MAClB,SAAAC,EAAA,IAACwF,GAAA,CACG,QAAS,CACP,CACE,QAAQ,OACR,MAAO,GACP,MAAO,QACP,MAAO,GACP,UAAWC,EAAY,WACvB,UAAW,CAACC,EAAMC,IAAQ3F,EAAA,IAACsC,EAAA,CACzB,UAAWmD,EAAY,mBACvB,QAAS,CACP,CAAC,MAAO,EAAE,gBAAgB,EAAG,KAAK,WAAY,QAAQ,IAAIL,EAAK,OAAOO,EAAI,IAAI,CAAC,EAC/E,CAAC,MAAO,EAAE,iBAAiB,EAAG,KAAK,SAAU,QAAQ,IAAIP,EAAK,WAAWO,EAAI,IAAI,CAAC,CACpF,EAEE,SAAA3F,EAAAA,IAACwC,EAAK,CAAA,KAAM,WAAa,CAAA,CAAA,CAC3B,CACJ,EACA,CACE,MAAM,EAAE,kBAAkB,EAC1B,QAAQ,OACR,SAAU,IACV,MAAO,QACP,MAAM,EACR,EACA,CACE,MAAM,EAAE,eAAe,EACvB,QAAQ,OACR,SAAU,IACV,MAAO,QACP,MAAM,EACR,EACA,CACE,MAAM,EAAE,kBAAkB,EAC1B,QAAQ,mBACR,SAAU,IACV,MAAO,QACP,MAAM,EACR,EACA,CACE,MAAM,EAAE,oBAAoB,EAC5B,QAAQ,OACR,SAAU,IACV,MAAO,QACP,UAAW,CAACyC,EAAMU,IAAQ3F,OAAAA,OAAAA,EAAAA,IAACiE,GAAW,aAAc,EAAE,oBAAoB,EAAG,MAAOhD,EAAc,QAAQ0E,EAAI,IAAI,EAAI,MAAQ1E,EAAc,aAAc,OAC1J,SAACpB,OAAA,QAAA,CAAM,UAAWE,EAAI,QACpB,SAAA,CAACC,EAAA,IAAA,QAAA,CACC,gBAAC,KACC,CAAA,SAAA,CAACA,EAAA,IAAA,KAAA,CAAI,SAAE,EAAA,aAAa,CAAE,CAAA,EACrBA,EAAA,IAAA,KAAA,CAAI,SAAE,EAAA,gBAAgB,CAAE,CAAA,CAAA,CAAA,CAC3B,CACF,CAAA,EACAA,EAAAA,IAAC,SACE,SAAOiF,GAAAtE,EAAAM,EAAc,eAAd,YAAAN,EAA4B,IAAKgC,GACvC9C,EAAAA,KAAC,KACC,CAAA,SAAA,CAACG,EAAAA,IAAA,KAAA,CAAI,WAAE,EAAG,CAAA,QACT,KAAI,CAAA,SAAA2C,EAAE,KAAMgD,EAAI,IAAK,EAAS,CAAA,CAAA,EAFxBhD,EAAE,EAGb,GACG,IACL,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACA,EACA,CACE,MAAM,EAAE,gBAAgB,EACxB,QAAQ,SACR,SAAU,IACV,MAAO,QACP,UAAYiD,GAAW5F,EAAAA,IAAC6F,IAAU,OAAAD,CAA2C,CAAA,CAC/E,CACF,EACA,cAAe,IACf,UAAW,GACX,UAAW,IACX,aAAc7F,EAAI,GAClB,WAAYsF,CAAA,CAAA,EAElB,CAAA,EAEJ,CACA,CAAA,CAAA,CAEJ,CAAC,sLC9PYS,GAAgB3F,EAAS,IAAM,CAClC,KAAA,CAAC,aAAA4F,GAAgB7E,IACjB,CAAC,EAAAG,GAAKE,IAENyE,EAAe,CACjB,SAAU,OACV,WAAY,QAAA,EAGVC,EAAc,CAChB,OAAQ,GACR,KAAM,UACN,OAAQ,SAAA,EAGNC,EAAYC,GACPA,EAAM,eAAe,QAASF,CAAW,EAG9CG,EAAeD,GACT,GAAG7E,GAAK,EAAE,eAAe,MAAM6E,EAAM,eAAe,OAAO,IAIvE,OAAAnG,EAAA,IAAC,OAAI,UAAWD,EAAI,KAChB,SAACF,EAAAA,KAAAuC,EAAA,CAAK,YAAa,EACf,SAAA,CAAAvC,OAACuC,EAAK,CAAA,QAAO,GAAC,UAAWrC,EAAI,UACzB,SAAA,CAACC,EAAAA,IAAAqC,EAAA,CAAQ,UAAWtC,EAAI,aAAc,QAAQ,KAAK,MAAOsB,EAAE,qBAAqB,CAAG,CAAA,EACnFrB,EAAA,IAAAqG,EAAA,CAAoB,MAAM,OAAO,OAAO,OACzC,SAAAxG,EAAA,KAACyG,EAAA,CACG,OAAQ,gBACR,UAAWvG,EAAI,MACf,KAAMgG,EAAa,oBAAoB,QACvC,OAAQ,CACJ,IAAK,EACL,MAAO,GACP,KAAM,GACN,OAAQ,CACZ,EAEA,SAAA,CAAAlG,OAAC,OACG,CAAA,SAAA,CAACA,EAAAA,KAAA,iBAAA,CAAe,GAAG,kBAAkB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IACzD,SAAA,CAAAG,MAAC,QAAK,OAAO,KAAK,UAAU,UAAU,YAAa,GAAI,QACtD,OAAK,CAAA,OAAO,MAAM,UAAU,UAAU,YAAa,EAAE,CAAA,EAC1D,EACAH,EAAAA,KAAC,iBAAe,CAAA,GAAG,iBAAiB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IACxD,SAAA,CAAAG,MAAC,QAAK,OAAO,KAAK,UAAU,UAAU,YAAa,GAAI,QACtD,OAAK,CAAA,OAAO,MAAM,UAAU,UAAU,YAAa,EAAE,CAAA,EAC1D,CAAA,EACJ,EACCA,EAAA,IAAAuG,EAAA,CAAc,gBAAgB,MAAM,SAAU,GAAO,EACtDvG,EAAAA,IAACwG,EAAM,CAAA,UAAWzG,EAAI,SAAU,QAAQ,IAAI,cAAemG,EAAU,WAAY,EAAI,CAAA,EACrFlG,MAACyG,GAAM,UAAW1G,EAAI,SAAU,cAAegG,EAAa,oBAAoB,WAAY,EAC5F/F,EAAA,IAACC,EAAA,CACG,aAAc+F,EACd,eAAgBI,EAChB,UAAWL,EAAa,oBAAoB,gBAAA,CAChD,EACC/F,EAAA,IAAA0G,EAAA,CAAK,KAAK,WAAW,QAAQ,aAAa,QAAQ,IAAI,OAAO,UAAU,YAAa,EAAG,KAAK,wBAAwB,EACpH1G,EAAA,IAAA0G,EAAA,CAAK,KAAK,WAAW,QAAQ,YAAY,QAAQ,IAAI,OAAO,UAAU,YAAa,EAAG,KAAK,uBAAuB,CAAA,CAAA,CAAA,EAEvH,CAAA,EACJ,SAECtE,EAAK,CAAA,QAAO,GAAC,UAAWrC,EAAI,UACzB,SAAA,CAACC,EAAAA,IAAAqC,EAAA,CAAQ,UAAWtC,EAAI,aAAc,QAAQ,KAAK,MAAOsB,EAAE,gBAAgB,CAAG,CAAA,EAC9ErB,EAAA,IAAAqG,EAAA,CAAoB,MAAM,OAAO,OAAO,OACzC,SAAAxG,EAAA,KAACyG,EAAA,CACG,OAAQ,gBACR,UAAWvG,EAAI,MACf,KAAMgG,EAAa,eAAe,QAClC,OAAQ,CACJ,IAAK,EACL,MAAO,GACP,KAAM,GACN,OAAQ,CACZ,EACA,SAAA,CAAAlG,OAAC,OACG,CAAA,SAAA,CAACA,EAAAA,KAAA,iBAAA,CAAe,GAAG,gBAAgB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IACvD,SAAA,CAAAG,MAAC,QAAK,OAAO,KAAK,UAAU,UAAU,YAAa,GAAI,QACtD,OAAK,CAAA,OAAO,MAAM,UAAU,UAAU,YAAa,EAAE,CAAA,EAC1D,EACAH,EAAAA,KAAC,iBAAe,CAAA,GAAG,qBAAqB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAC5D,SAAA,CAAAG,MAAC,QAAK,OAAO,KAAK,UAAU,UAAU,YAAa,GAAI,QACtD,OAAK,CAAA,OAAO,MAAM,UAAU,UAAU,YAAa,EAAE,CAAA,EAC1D,EACAH,EAAAA,KAAC,iBAAe,CAAA,GAAG,iBAAiB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IACxD,SAAA,CAAAG,MAAC,QAAK,OAAO,KAAK,UAAU,UAAU,YAAa,GAAI,QACtD,OAAK,CAAA,OAAO,MAAM,UAAU,UAAU,YAAa,EAAE,CAAA,EAC1D,CAAA,EACJ,EACCA,EAAA,IAAAuG,EAAA,CAAc,gBAAgB,MAAM,SAAU,GAAO,EACtDvG,EAAAA,IAACwG,EAAM,CAAA,UAAWzG,EAAI,SAAU,QAAQ,IAAI,cAAemG,EAAU,WAAY,EAAI,CAAA,EACrFlG,MAACyG,GAAM,UAAW1G,EAAI,SAAU,cAAegG,EAAa,eAAe,WAAY,EACvF/F,EAAA,IAACC,EAAA,CACG,aAAc+F,EACd,eAAgBI,EAChB,UAAWL,EAAa,eAAe,gBAAA,CAC3C,EACC/F,EAAA,IAAA0G,EAAA,CAAK,KAAK,WAAW,QAAQ,YAAY,QAAQ,IAAI,OAAO,UAAU,YAAa,EAAG,KAAK,uBAAuB,EAClH1G,EAAA,IAAA0G,EAAA,CAAK,KAAK,WAAW,QAAQ,gBAAgB,QAAQ,IAAI,OAAO,UAAU,YAAa,EAAG,KAAK,2BAA2B,EAC1H1G,EAAA,IAAA0G,EAAA,CAAK,KAAK,WAAW,QAAQ,WAAW,QAAQ,IAAI,OAAO,UAAU,YAAa,EAAG,KAAK,sBAAsB,CAAA,CAAA,CAAA,EAErH,CAAA,EACJ,CAAA,CACJ,CAAA,CACJ,CAAA,CAEJ,CAAC,EC7FKC,GAAWxG,EAAS,IAAM,aAC9ByG,GAAY,UAAU,EACtB,KAAM,CAAE,cAAA3F,EAAe,YAAA+D,EAAa,aAAAe,GAAiB7E,EAAS,EACxD,CAAE,SAAA2F,GAAaC,KACf,CAAE,GAAMvF,IACRwF,EAAYF,EAAS,SAAS,SAAS,EACvCG,EAAiBH,EAAS,SAAS,cAAc,EAEvDpD,OAAAA,EAAAA,UAAU,IAAI,CACZxC,EAAc,aAAa,EAC3B+D,EAAY,UAAU,EACtBe,EAAa,UAAU,CACzB,EAAE,CAAE,CAAA,EACJkB,GAAY,IAAM,CAChBhG,EAAc,aAAa,EAC3B+D,EAAY,UAAU,EACtBe,EAAa,UAAU,GACtB,GAAI,SAGJ,MAEG,CAAA,SAAA,CAAA9E,EAAc,WAAa8E,EAAa,iBAAiB,GAEvDlG,OAAA4E,EAAAA,SAAA,CAAA,SAAA,CAAAzE,MAACkH,IAAO,MAAOnB,EAAa,UAAYoB,GAA4B,SAAU,KAAK,SAAS,SAAS,QAAQ,QAAS,IAAMpB,EAAa,eAAmB,EAAA,SAAA,EAAE,2BAA2B,EAAE,QAC1LD,GAAc,EAAA,CAAA,EACjB,EAGA,CAACkB,GAECnH,EAAAA,KAAA4E,EAAA,SAAA,CAAA,SAAA,CAACzE,EAAAA,IAAAoH,GAAA,CAAW,MAAOnG,EAAc,UAAW,EAAE,mBAAmB,EAAG,EAAE,iBAAiB,CAAG,CAAA,QACzFoG,EAAK,CAAA,UAAS,GAAC,QAAQ,KAEtB,UAAc1G,EAAAM,EAAA,kBAAA,MAAAN,EAAiB,QAASC,EAAAK,EAAc,kBAAd,YAAAL,EAA+B,IAAIJ,GACxER,EAAAA,IAAAqH,EAAA,CAAmB,KAAI,GAAC,GAAI,GAAI,GAAI,EACnC,SAACrH,EAAAA,IAAAE,GAAA,CAAW,OAAQM,CAAA,CAAM,GADjBA,EAAK,EAEhB,SAED8G,GAAO,CAAA,QAAS,EAAE,oBAAoB,CAAG,CAAA,EAE5C,CAAA,EACF,EAGC,CAACP,GAAa9F,EAAc,WAE3BpB,EAAAA,KAAA4E,EAAAA,SAAA,CAAA,SAAA,CAAA5E,EAAA,KAACuC,EAAK,CAAA,eAAgB,gBAAiB,WAAW,SAChD,SAAA,CAAApC,EAAA,IAACoH,GAAW,CAAA,MAAO,EAAE,oBAAoB,CAAG,CAAA,EAC5CvH,EAAAA,KAACuC,EAAK,CAAA,QAAS,EACZ,SAAA,CAAAnB,EAAc,cACZjB,EAAAA,IAAAkH,GAAA,CAAO,MAAOjG,EAAc,YAAa,KAAK,SAAS,SAAS,QAAQ,QAAS,IAAMA,EAAc,kBAAsB,EAAA,SAAA,EAAE,sBAAsB,EAAE,EAEvJjB,EAAA,IAAAuH,GAAA,CAAO,KAAK,OAAO,MAAkBtG,EAAc,SAAzB,OAAgC,OAAO,UAAW,QAAS,IAAMA,EAAc,UAAU,MAAM,EAAG,EAC5HjB,EAAA,IAAAuH,GAAA,CAAO,KAAK,OAAO,MAAmBtG,EAAc,SAA1B,QAAiC,OAAO,UAAW,QAAS,IAAMA,EAAc,UAAU,OAAO,EAAG,EAC9HA,EAAc,aAAc,OAAO,GAClCjB,EAAA,IAACsC,EAAA,CACC,SAAS,QACT,QACE,CACE,CAAC,MAAO,EAAE,mBAAmB,EAAG,KAAK,UAAW,QAAQ,IAAIrB,EAAc,sBAAsB,EAChG,CAAC,MAAO,EAAE,sBAAsB,EAAG,KAAK,UAAW,QAAQ,IAAIA,EAAc,uBAAuB,EACnGA,EAAc,mBAMf,CACE,MAAO,EAAE,8BAA8B,EACvC,KAAK,qBACL,QAAQ,IAAIA,EAAc,oBAAoB,EAC9C,QAAQ,CAAC,CAAC,MAAO,EAAE,+BAA+B,EAAG,QAAQ,IAAIA,EAAc,qBAAqB,EAAE,CACxG,EAVA,CACE,MAAO,EAAE,uBAAuB,EAChC,KAAK,qBACL,QAAQ,IAAIA,EAAc,oBAAoB,CAAA,CAQlD,EAGF,eAAC,OAAK,CAAA,UAAWnB,EAAGyC,EAAU,eAAeA,EAAU,OAAQA,EAAU,QAASA,EAAU,IAAI,EAC9F,eAACC,EAAK,CAAA,KAAM,WAAa,CAAA,EAC3B,CAAA,CACF,CAAA,EAEJ,CAAA,EACF,SACC,MAAI,CAAA,UAAW1C,EAAGyF,GAAO,WAAW,EAEjC,SAAA,CAAAtE,EAAc,SAAW,QACzBjB,EAAAA,IAACqH,GAAK,UAAS,GAAC,QAAQ,KACrB,UAAAG,EAAAvG,EAAc,cAAd,MAAAuG,EAA2B,QAAQC,EAAAxG,EAAc,cAAd,YAAAwG,EAA2B,OAC5DzH,EAAAA,IAAAqH,EAAA,CAAmB,KAAI,GAAC,GAAI,GAAI,GAAI,EACnC,SAACrH,MAAA2E,GAAA,CAAO,eAAgB1D,EAAc,QAAS,GAAIyG,CAAM,CAAA,CAAA,EADhDA,EAAK,EAEhB,GAEE1H,MAAAsH,GAAA,CAAO,QAAS,EAAE,gBAAgB,EAAG,CAC3C,CAAA,EAGArG,EAAc,SAAW,SACzBjB,EAAAA,IAACmF,GAAU,CAAA,CAAA,CAAA,EAEf,CAAA,EACF,CAEJ,CAAA,CAAA,CAEJ,CAAC"}