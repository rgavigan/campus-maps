{"version":3,"file":"AppsSwing-1cebdb08.js","sources":["../../src/views/Applications/Partials/TabButton.tsx","../../src/views/Applications/Partials/ManageApp/ManageApp.tsx","../../src/views/Applications/Partials/DropItem.tsx","../../src/views/Applications/AppsSwing.tsx"],"sourcesContent":["// core\nimport { useState } from 'react';\nimport cx from 'classnames';\n// components\nimport { Button, Badge, Icon, IWrapperComponentProps } from '@/components';\n// styles\nimport css from '../Applications.module.scss';\nimport { useStore } from '@/stores';\nimport { observer } from 'mobx-react';\nimport { useTranslation } from 'react-i18next';\n\nexport interface ITabButtonProps extends IWrapperComponentProps {\n  icon:string;\n  onClick?: () => void\n  name: string;\n  active: boolean\n}\n\nexport const TabButton = observer(({children, icon, onClick, name, active}:ITabButtonProps) => {\n  const [badgeTxt, setBadgeTxt] = useState<boolean>(false)\n  const { configStore } = useStore();\n  const {t} = useTranslation();\n  const getContent = ()=> {\n    const txt = badgeTxt?t('unsaved'):' ';\n    if(name==='webConfig') {\n      return configStore.wcChanged?txt:''\n    } else {\n      return configStore.acChanged?txt:''\n    }\n  }\n\n  return (\n    <Button.UI className={cx(css.appTab, {[css.active]: active})}>\n      <Badge\n        bOnBadge\n        className={cx(css.changesTracking)}\n        vertical='top'\n        side='left'\n        color='danger'\n        size='small'\n        onHover={()=>setBadgeTxt(!badgeTxt)}\n        content={getContent() as string}\n        onClick={onClick}\n      >\n        <Icon className={css.appTabIcon} name={icon} onClick={onClick} /> \n      </Badge>\n        {children}\n    </Button.UI>\n  );\n});\n","// .core\nimport React, {useState, useEffect} from 'react'\nimport cx from 'classnames'\nimport { useHistory } from 'react-router-dom'\nimport { observer } from 'mobx-react'\nimport { useTranslation } from 'react-i18next'\n// Services \nimport { ConfigService } from '@/services'\n// components\nimport { Button, Dialog, Card, AvatarWithTitle, Flex, StatusBar, showToastOk } from '@/components'\n// styles\nimport css from './ManageApp.module.scss'\n// utils\nimport { ApiServerUrl } from '@/utils'\n// stores\nimport { useStore } from '@/stores'\n\ninterface IManageAppProps {\n  app:string,\n  className?: string,\n  onClick?(): void\n}\n\nexport const ManageApp = observer(function ManageApp({\n  app,\n  className,\n  onClick,\n}: IManageAppProps) {\n  const {permissionsStore, globalStore} = useStore();\n  const info = globalStore.info!;\n  const [loadingMessage, setLoadingMessage] = useState<string>('');\n  const [stoppable, setStoppable] = useState<boolean>(false);\n  const [startable, setStartable] = useState<boolean>(false);\n  const [confirmKillallDialogOpen, setConfirmKillallDialogOpen] = useState<boolean>(false);\n  const [confirmRemoveDialogOpen, setConfirmRemoveDialogOpen] = useState<boolean>(false);\n  const history = useHistory()\n  const {t} = useTranslation()\n  const handleStop = ()=> {\n    if(info.runningInstances !== 0) {\n      setConfirmKillallDialogOpen(true)\n    } else {\n      stop();\n    }\n  }\n\n  const loadInfo = (appPath:string) => {\n    globalStore.loadInfo(appPath)\n    .then(()=>{\n      setLoadingMessage('');\n      globalStore.clearInterval();\n      setStoppable(globalStore.info?.enabled!)\n      setStartable(!globalStore.info?.enabled)\n    })\n    .then(()=> {\n      globalStore.setInterval(() => {\n        setLoadingMessage('');\n        loadInfo(appPath);\n      }, 5000)\n    })\n    .catch(()=>{\n      globalStore.clearInterval();\n    })\n  }\n\n  const toggle = (bopen:boolean) => {\n    setConfirmKillallDialogOpen(bopen);\n  };\n  const start = () => {\n    setLoadingMessage('Requesting Start');\n    setStoppable(false);\n    setStartable(false);\n    ConfigService\n      .start(app?app:'')\n      .then(() => {\n        loadInfo(app)\n        showToastOk(t('ok.successStartApp'));\n      })\n  }\n  const stop = () => {\n    setLoadingMessage('Requesting Stop');\n    setStoppable(false);\n    setStartable(false);\n    ConfigService\n    .stop(app?app:'')\n    .then(() => {\n      loadInfo(app)\n      showToastOk(t('ok.successStopApp'));\n      if(confirmKillallDialogOpen) {\n        setConfirmKillallDialogOpen(false);\n      }\n    })\n  }\n\n  const remove = () => {\n    setLoadingMessage('Uninstalling app');\n    setStoppable(false);\n    setStartable(false);\n    ConfigService\n      .remove(app)\n      .then(() => {\n        globalStore.removePath(app)\n        showToastOk(t('ok.successRemoveApp'));\n        setStartable(true);\n        history.push('/apps')\n      })\n  }\n\n  useEffect(\n    () => {\n      setLoadingMessage('');\n      loadInfo(app);\n      return () => globalStore.clearInterval();\n    },\n    [app]\n  )\n  \n  return (\n    <Card className={cx(css.root, className)} onClick={onClick}>\n      <Flex style={{padding: '0 1rem'}}>\n        <Flex bColumn className={css.AvatarCol} flex={2}>\n          <AvatarWithTitle\n            size='medium'\n            src={ApiServerUrl + \"/\" + app + '/rest/appicon'}\n            title={info?.name}\n            className={css.manageApp}\n          />\n        </Flex>\n        <Flex bColumn flex={1} className={css.smCol} justifyContent={'center'} >\n          <span className={css.label}>{t('general.status')}:</span>\n          <StatusBar status={globalStore.info?.status!} loadMessage={loadingMessage} />\n        </Flex>\n        <Flex bColumn flex={1} className={css.smCol} justifyContent={'center'}>\n          <span className={css.label}>{t('apps.path')}:</span>\n          <a href={info?.url} target='_blank' rel=\"noreferrer\">{info?.path}</a>\n        </Flex>\n        <Flex flex={2} justifyContent={'flex-end'} alignItems={'center'}>\n          { stoppable && permissionsStore.get('stop') && <Button color={'danger'} size={'small'} label={t('apps.disable')} onClick={handleStop}/>}\n          { startable && permissionsStore.get('start') && <Button label={t('apps.enable')} size={'small'} style={{marginRight:'6px'}} onClick={start}/>}\n          { startable && permissionsStore.get('remove') && <Button color={'danger'} size={'small'} label={t('apps.remove')} onClick={()=>setConfirmRemoveDialogOpen(b=>!b)}/>}\n        </Flex>\n      </Flex>\n      <Dialog\n        bOpen={confirmKillallDialogOpen}\n        title={t(\"sessions.warning\")}\n        footer={true}\n        onToggle={toggle}\n        onConfirm={stop}\n      >\n        {\n          globalStore.info?.runningInstances === 1 ?\n          t('apps.runningInstanceKillQ'):\n          t('apps.runningInstancesKillQ',{runningInstances:globalStore.info?.runningInstances})\n        }\n      </Dialog>\n      <Dialog\n        bOpen={confirmRemoveDialogOpen}\n        title={t('apps.remove')+' '+app}\n        footer={true}\n        onToggle={(b:boolean)=>setConfirmRemoveDialogOpen(b)}\n        onConfirm={remove}\n      >\n        {t('apps.AreuSureRemove', {app})}\n      </Dialog>\n    </Card>\n  )\n})\n","// core\nimport React from 'react';\nimport cx from 'classnames';\n// components\nimport { Coin, Switch } from '@/components';\n\n// styles\nimport css from '../Applications.module.scss';\nimport { observer } from 'mobx-react';\nimport { useStore } from '@/stores';\nimport { ITab } from '@/utils';\n\nexport interface IDropItemProps {\n  bLast:boolean\n  item:ITab\n  onClick: (key:string)=>void\n}\n\nexport const DropItem = observer(({bLast,item, onClick}:IDropItemProps) => {\n  const {configStore} = useStore()\n  return (\n    <li className={cx({[css.fitem]:bLast})} key={item.key}>\n      <Switch className={css.popSwitch} position={'right'} value={item.activeSP} onClick={()=>configStore.activeSpSwitch(item)}>\n        <span onClick={()=>onClick(item.key)}>\n        {item.key}\n        {item.wasEdited && <Coin color='danger' size='small' className={css.coin}>  </Coin>}\n        </span>\n      </Switch>\n    </li>\n  );\n});","// core\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'\nimport { observer } from 'mobx-react';\nimport cx from 'classnames'\nimport { useTranslation } from 'react-i18next';\n// components\nimport {Button, Popover, Flex, NoData, Coin } from '@/components'\nimport FormiumConfig from './Partials/FormiumConfig'\nimport { TabButton } from './Partials/TabButton';\nimport { ManageApp } from './Partials/ManageApp/ManageApp';\nimport { DropItem } from './Partials/DropItem';\n// routes\nimport { changeTitle } from '../routes';\n// styles\nimport css from './Applications.module.scss'\n// stores\nimport { useStore } from '@/stores';\n//utils\nimport { ApiServerUrl, hiddenWebConfigFields, toPath } from '@/utils';\n\n\nconst AppsSwing = observer(() => {\n  const {permissionsStore, configStore, globalStore} = useStore();\n  const { app } = useParams<{app:string}>();\n  const [dropOpen, setDropOpen] = useState<boolean>(false)\n  const {t, i18n} = useTranslation();\n  const handleToggleExpand = useCallback(() => {\n    if(globalStore.info?.cluster){\n      setDropOpen(prev => !prev);\n    } else {\n      configStore.openTab(configStore.allOrOne)\n    }\n    \n  }, [setDropOpen]);\n\n  const handleDropdownClick = useCallback((key) => {\n    configStore.openTab(key)\n    setDropOpen(prev => !prev);\n  }, [setDropOpen]);\n\n  const getAppConfigBtnText = () => {\n    if(!globalStore.isCluster || configStore.hasAllInactive || configStore.allOrOne ==='allID') {\n      return t('config.appConfig')\n    }\n\n    return `${t('config.appConfig')} (${configStore.allOrOne})`\n  };\n\n\n  useEffect(() => {\n    return () => {\n      configStore.clearConfigData()\n    }\n  },[]);\n\n  useEffect(() => {\n    configStore.loadConfig(app);\n    globalStore.updateApp(app);\n    if(globalStore.toggleAddApp) {\n      globalStore.setToggleAddApp(false)\n    }\n  },[app]);\n\n\n  changeTitle(t('routes.appConfig'));\n\n  return (\n    <>\n      <ManageApp app={app} />\n      <Flex className={css.stickyBtnGroup} >\n        <TabButton\n          name='webConfig' \n          icon='web' \n          onClick={()=>configStore.openTab('webConfig')} \n          active={configStore.activeTab === 'webConfig'}\n          >\n          <div className={css.appTabText} onClick={()=>configStore.openTab('webConfig')}>{t('config.webConfig')}</div>\n        </TabButton>\n        <TabButton\n          name='appConfig'\n          icon='av_timer'\n          onClick={handleToggleExpand}\n          active={configStore.activeTab === 'allID' || configStore.isTab()}\n        >\n          <div className={css.appTabText} onClick={()=>configStore.openTab(configStore.allOrOne)}>\n            {getAppConfigBtnText()}\n          </div>\n          <Popover\n            backdrop\n            className={cx(css.popover)}\n            open={dropOpen}\n            side=\"left\"\n            onBlur={handleToggleExpand}>\n            <ul className={css.popList}>\n              {\n                !configStore.hideALL && \n                <li className={css.fitem} onClick={()=>handleDropdownClick('allID')}>\n                  {t('config.allSessionConfig')}\n                  {configStore.allConfigWasEdited && <Coin color='danger' size='small' className={css.coin}>  </Coin>}\n                </li>\n              }\n\n              {!configStore.hasAllInactive &&\n                <>\n                <div className={css.appLabel}>{t('config.activeSP')}:</div>\n                {configStore.activeTabs.map((item,i)=>(\n                  <DropItem key={item.key} bLast={configStore.activeTabs.length === i+1} item={item} onClick={()=>handleDropdownClick(item.key)} />\n                ))}\n                </>\n              }\n\n              {!configStore.hasAllActive &&\n                <>\n                  <div className={css.appLabel}>{t('config.inactiveSP')}:</div>\n                  {configStore.inactiveTabs.map((item,i)=>(\n                    <DropItem key={item.key} bLast={configStore.inactiveTabs.length === i+1} item={item} onClick={()=>handleDropdownClick(item.key)} />\n                  ))}\n                </>\n              }\n            </ul>\n          </Popover>\n        </TabButton>\n      </Flex>\n      <div className={cx(css.appTabContent)}>\n        { configStore.activeTab === 'webConfig' && \n            <FormiumConfig\n              readonly={!permissionsStore.get('configSwingEdit')} \n              identify={app} \n              path={toPath(ApiServerUrl,app)} \n              value={configStore.config?.webConfig} \n              hide={hiddenWebConfigFields}\n              translations={i18n.getDataByLanguage(i18n.language)?.translation}\n              lang={i18n.language}\n            />\n        }\n        { \n          configStore.activeTab === 'allID' && !configStore.hideALL && \n          <FormiumConfig\n            readonly={!permissionsStore.get('configSwingEdit')} \n            identify={'allID'}\n            path={toPath(ApiServerUrl,app)} \n            list={configStore.config?.appConfig}\n            translations={i18n.getDataByLanguage(i18n.language)?.translation}\n            lang={i18n.language}\n          />\n        }\n        {configStore.tabs.map((item)=>(\n          <React.Fragment key={item.key}>\n            {\n              configStore.isTab(item.key) &&\n              <FormiumConfig\n                readonly={!permissionsStore.get('configSwingEdit')} \n                identify={item.key} \n                path={toPath(ApiServerUrl,app)} \n                value={configStore.config?.appConfig![item.key]} \n                istab={true}\n                translations={i18n.getDataByLanguage(i18n.language)?.translation}\n                lang={i18n.language}\n              />\n            }\n          </React.Fragment>\n        ))}\n        {\n          configStore.hasAllInactive && configStore.activeTab !== 'webConfig' &&\n          <NoData message={t('apps.noActiveSps')}>\n            <Button icon={'refresh'} color={'neutral'} onClick={()=>configStore.loadConfig(app)} />\n          </NoData>\n        }\n      </div>\n      <Button.Group \n        className={cx(css.floatingButtons,{[css.activeApply]: configStore.activeApply})}\n        buttons={\n          [\n            {label: t('general.apply'),size:'small', color:'blue', onClick: ()=>configStore.setConfig(app)},\n            {label:t('general.reset'),size:'small', color:'white', onClick: ()=>configStore.resetConfig(app)}\n          ]\n        } \n      />\n    </>\n  )\n})\n\nexport default AppsSwing"],"names":["TabButton","observer","children","icon","onClick","name","active","badgeTxt","setBadgeTxt","useState","configStore","useStore","t","useTranslation","getContent","txt","jsxs","Button","cx","css","jsx","Badge","Icon","ManageApp","app","className","permissionsStore","globalStore","info","loadingMessage","setLoadingMessage","stoppable","setStoppable","startable","setStartable","confirmKillallDialogOpen","setConfirmKillallDialogOpen","confirmRemoveDialogOpen","setConfirmRemoveDialogOpen","history","useHistory","handleStop","stop","loadInfo","appPath","_a","_b","toggle","bopen","start","ConfigService","showToastOk","remove","useEffect","Card","Flex","AvatarWithTitle","ApiServerUrl","StatusBar","b","Dialog","_c","DropItem","bLast","item","Switch","Coin","AppsSwing","useParams","dropOpen","setDropOpen","i18n","handleToggleExpand","useCallback","prev","handleDropdownClick","key","getAppConfigBtnText","changeTitle","Fragment","Popover","i","FormiumConfig","toPath","hiddenWebConfigFields","_d","React","NoData"],"mappings":"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"}